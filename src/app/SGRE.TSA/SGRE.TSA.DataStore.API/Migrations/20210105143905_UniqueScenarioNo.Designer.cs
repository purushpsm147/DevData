// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SGRE.TSA.DataStore.API;

namespace SGRE.TSA.DataStore.API.Migrations
{
    [DbContext(typeof(TsaContext))]
    [Migration("20210105143905_UniqueScenarioNo")]
    partial class UniqueScenarioNo
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.Certification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CertificationName")
                        .HasColumnType("text")
                        .HasColumnName("certification_name");

                    b.HasKey("Id")
                        .HasName("pk_certifications");

                    b.ToTable("certifications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CertificationName = "Tower component certificate"
                        },
                        new
                        {
                            Id = 2,
                            CertificationName = "Site Suitability Design Assessment (SSDA)"
                        },
                        new
                        {
                            Id = 3,
                            CertificationName = "Tower component certificate & Site Suitability Design Assessment (SSDA)"
                        },
                        new
                        {
                            Id = 4,
                            CertificationName = "none"
                        });
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.ConstructionConstraint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityAlwaysColumn();

                    b.Property<string>("AdditionalRequirements")
                        .HasColumnType("text")
                        .HasColumnName("additional_requirements");

                    b.Property<decimal>("CraneLiftingHeighMtrs")
                        .HasColumnType("numeric")
                        .HasColumnName("crane_lifting_heigh_mtrs");

                    b.Property<decimal>("CraneLiftingWeightTon")
                        .HasColumnType("numeric")
                        .HasColumnName("crane_lifting_weight_ton");

                    b.Property<DateTimeOffset?>("LastModifiedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_date_time");

                    b.Property<int>("ProjectConstraintId")
                        .HasColumnType("integer")
                        .HasColumnName("project_constraint_id");

                    b.Property<DateTimeOffset?>("RecordInsertDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("record_insert_date_time");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_construction_constraints");

                    b.HasIndex("ProjectConstraintId")
                        .IsUnique()
                        .HasDatabaseName("ix_construction_constraints_project_constraint_id");

                    b.ToTable("construction_constraints");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("country_name");

                    b.Property<int>("RegionId")
                        .HasColumnType("integer")
                        .HasColumnName("region_id");

                    b.HasKey("Id")
                        .HasName("pk_countries");

                    b.HasIndex("RegionId")
                        .HasDatabaseName("ix_countries_region_id");

                    b.ToTable("countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryName = "China",
                            RegionId = 1
                        },
                        new
                        {
                            Id = 2,
                            CountryName = "Japan",
                            RegionId = 1
                        },
                        new
                        {
                            Id = 3,
                            CountryName = "South Korea",
                            RegionId = 1
                        },
                        new
                        {
                            Id = 4,
                            CountryName = "Australia",
                            RegionId = 1
                        },
                        new
                        {
                            Id = 5,
                            CountryName = "Vietnam",
                            RegionId = 1
                        },
                        new
                        {
                            Id = 6,
                            CountryName = "New Zealand",
                            RegionId = 1
                        },
                        new
                        {
                            Id = 7,
                            CountryName = "Philippines",
                            RegionId = 1
                        },
                        new
                        {
                            Id = 8,
                            CountryName = "Indonesia",
                            RegionId = 1
                        },
                        new
                        {
                            Id = 9,
                            CountryName = "Taiwan",
                            RegionId = 1
                        },
                        new
                        {
                            Id = 10,
                            CountryName = "Pakistan",
                            RegionId = 1
                        },
                        new
                        {
                            Id = 11,
                            CountryName = "Mongolia",
                            RegionId = 1
                        },
                        new
                        {
                            Id = 12,
                            CountryName = "Thailand",
                            RegionId = 1
                        },
                        new
                        {
                            Id = 13,
                            CountryName = "Myanmar",
                            RegionId = 1
                        },
                        new
                        {
                            Id = 14,
                            CountryName = "New Caledonia",
                            RegionId = 1
                        },
                        new
                        {
                            Id = 15,
                            CountryName = "Cambodia",
                            RegionId = 1
                        },
                        new
                        {
                            Id = 16,
                            CountryName = "Laos",
                            RegionId = 1
                        },
                        new
                        {
                            Id = 17,
                            CountryName = "Brazil",
                            RegionId = 2
                        },
                        new
                        {
                            Id = 18,
                            CountryName = "India",
                            RegionId = 3
                        },
                        new
                        {
                            Id = 19,
                            CountryName = "Sri Lanka",
                            RegionId = 3
                        },
                        new
                        {
                            Id = 20,
                            CountryName = "Bangladesh",
                            RegionId = 3
                        },
                        new
                        {
                            Id = 21,
                            CountryName = "Brazil",
                            RegionId = 4
                        },
                        new
                        {
                            Id = 22,
                            CountryName = "Mexico",
                            RegionId = 4
                        },
                        new
                        {
                            Id = 23,
                            CountryName = "Peru",
                            RegionId = 4
                        },
                        new
                        {
                            Id = 24,
                            CountryName = "Dominican Rep.",
                            RegionId = 4
                        },
                        new
                        {
                            Id = 25,
                            CountryName = "Argentina",
                            RegionId = 4
                        },
                        new
                        {
                            Id = 26,
                            CountryName = "Panama",
                            RegionId = 4
                        },
                        new
                        {
                            Id = 27,
                            CountryName = "Chile",
                            RegionId = 4
                        },
                        new
                        {
                            Id = 28,
                            CountryName = "Uruguay",
                            RegionId = 4
                        },
                        new
                        {
                            Id = 29,
                            CountryName = "Colombia",
                            RegionId = 4
                        },
                        new
                        {
                            Id = 30,
                            CountryName = "Belize",
                            RegionId = 4
                        },
                        new
                        {
                            Id = 31,
                            CountryName = "Nicaragua",
                            RegionId = 4
                        },
                        new
                        {
                            Id = 32,
                            CountryName = "Jamaica",
                            RegionId = 4
                        },
                        new
                        {
                            Id = 33,
                            CountryName = "Guatemala",
                            RegionId = 4
                        },
                        new
                        {
                            Id = 34,
                            CountryName = "Honduras",
                            RegionId = 4
                        },
                        new
                        {
                            Id = 35,
                            CountryName = "Costa Rica",
                            RegionId = 4
                        },
                        new
                        {
                            Id = 36,
                            CountryName = "El Salvador",
                            RegionId = 4
                        },
                        new
                        {
                            Id = 37,
                            CountryName = "Cuba",
                            RegionId = 4
                        },
                        new
                        {
                            Id = 38,
                            CountryName = "Dominica",
                            RegionId = 4
                        },
                        new
                        {
                            Id = 39,
                            CountryName = "Guyana",
                            RegionId = 4
                        },
                        new
                        {
                            Id = 40,
                            CountryName = "Ecuador",
                            RegionId = 4
                        },
                        new
                        {
                            Id = 41,
                            CountryName = "Guadeloupe",
                            RegionId = 4
                        },
                        new
                        {
                            Id = 42,
                            CountryName = "Puerto Rico",
                            RegionId = 4
                        },
                        new
                        {
                            Id = 43,
                            CountryName = "Trinidad Tobago",
                            RegionId = 4
                        },
                        new
                        {
                            Id = 44,
                            CountryName = "Bahamas",
                            RegionId = 4
                        },
                        new
                        {
                            Id = 45,
                            CountryName = "Bolivia",
                            RegionId = 4
                        },
                        new
                        {
                            Id = 46,
                            CountryName = "Barbados",
                            RegionId = 4
                        },
                        new
                        {
                            Id = 47,
                            CountryName = "Ireland",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 48,
                            CountryName = "Sweden",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 49,
                            CountryName = "Germany",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 50,
                            CountryName = "Romania",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 51,
                            CountryName = "Croatia",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 52,
                            CountryName = "Finland",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 53,
                            CountryName = "Belgium",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 54,
                            CountryName = "Uzbekistan",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 55,
                            CountryName = "Serbia",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 56,
                            CountryName = "United Kingdom",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 57,
                            CountryName = "Poland",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 58,
                            CountryName = "Saudi Arabia",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 59,
                            CountryName = "Denmark",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 60,
                            CountryName = "Utd Arab Emir.",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 61,
                            CountryName = "Ukraine",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 62,
                            CountryName = "Bulgaria",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 63,
                            CountryName = "Azerbaijan",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 64,
                            CountryName = "Turkey",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 65,
                            CountryName = "Norway",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 66,
                            CountryName = "Moldovia",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 67,
                            CountryName = "Iran Islamic Republic of",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 68,
                            CountryName = "Russian Fed.",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 69,
                            CountryName = "Bosnia-Herz.",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 70,
                            CountryName = "Israel",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 71,
                            CountryName = "Lebanon",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 72,
                            CountryName = "Kazakhstan",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 73,
                            CountryName = "Slovenia",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 74,
                            CountryName = "Netherlands",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 75,
                            CountryName = "Hungary",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 76,
                            CountryName = "Albania",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 77,
                            CountryName = "Austria",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 78,
                            CountryName = "Oman",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 79,
                            CountryName = "Switzerland",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 80,
                            CountryName = "Georgia",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 81,
                            CountryName = "Syrian Arab Republic",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 82,
                            CountryName = "Macedonia",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 83,
                            CountryName = "Luxembourg",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 84,
                            CountryName = "Kuwait",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 85,
                            CountryName = "Czech Republic",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 86,
                            CountryName = "Yemen",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 87,
                            CountryName = "Belarus",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 88,
                            CountryName = "Lithuania",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 89,
                            CountryName = "Iceland",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 90,
                            CountryName = "Estonia",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 91,
                            CountryName = "Latvia",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 92,
                            CountryName = "Armenia",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 93,
                            CountryName = "Montenegro",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 94,
                            CountryName = "Faroe Islands",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 95,
                            CountryName = "Bahrain",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 96,
                            CountryName = "USA",
                            RegionId = 6
                        },
                        new
                        {
                            Id = 97,
                            CountryName = "Canada",
                            RegionId = 6
                        },
                        new
                        {
                            Id = 98,
                            CountryName = "France",
                            RegionId = 7
                        },
                        new
                        {
                            Id = 99,
                            CountryName = "Spain",
                            RegionId = 7
                        },
                        new
                        {
                            Id = 100,
                            CountryName = "Greece",
                            RegionId = 7
                        },
                        new
                        {
                            Id = 101,
                            CountryName = "Morocco",
                            RegionId = 7
                        },
                        new
                        {
                            Id = 102,
                            CountryName = "Egypt",
                            RegionId = 7
                        },
                        new
                        {
                            Id = 103,
                            CountryName = "South Africa",
                            RegionId = 7
                        },
                        new
                        {
                            Id = 104,
                            CountryName = "Italy",
                            RegionId = 7
                        },
                        new
                        {
                            Id = 105,
                            CountryName = "Ghana",
                            RegionId = 7
                        },
                        new
                        {
                            Id = 106,
                            CountryName = "Mauritius",
                            RegionId = 7
                        },
                        new
                        {
                            Id = 107,
                            CountryName = "Kenya",
                            RegionId = 7
                        },
                        new
                        {
                            Id = 108,
                            CountryName = "Angola",
                            RegionId = 7
                        },
                        new
                        {
                            Id = 109,
                            CountryName = "Togo",
                            RegionId = 7
                        },
                        new
                        {
                            Id = 110,
                            CountryName = "Jordan",
                            RegionId = 7
                        },
                        new
                        {
                            Id = 111,
                            CountryName = "Zambia",
                            RegionId = 7
                        },
                        new
                        {
                            Id = 112,
                            CountryName = "Senegal",
                            RegionId = 7
                        },
                        new
                        {
                            Id = 113,
                            CountryName = "Ethiopia",
                            RegionId = 7
                        },
                        new
                        {
                            Id = 114,
                            CountryName = "Cyprus",
                            RegionId = 7
                        },
                        new
                        {
                            Id = 115,
                            CountryName = "Namibia",
                            RegionId = 7
                        },
                        new
                        {
                            Id = 116,
                            CountryName = "Gambia",
                            RegionId = 7
                        },
                        new
                        {
                            Id = 117,
                            CountryName = "Portugal",
                            RegionId = 7
                        },
                        new
                        {
                            Id = 118,
                            CountryName = "Djibouti",
                            RegionId = 7
                        },
                        new
                        {
                            Id = 119,
                            CountryName = "Mauritania",
                            RegionId = 7
                        },
                        new
                        {
                            Id = 120,
                            CountryName = "Sudan",
                            RegionId = 7
                        },
                        new
                        {
                            Id = 121,
                            CountryName = "Mozambique",
                            RegionId = 7
                        },
                        new
                        {
                            Id = 122,
                            CountryName = "Algeria",
                            RegionId = 7
                        },
                        new
                        {
                            Id = 123,
                            CountryName = "Tunisia",
                            RegionId = 7
                        },
                        new
                        {
                            Id = 124,
                            CountryName = "Tanzania",
                            RegionId = 7
                        },
                        new
                        {
                            Id = 125,
                            CountryName = "Ivory Coast",
                            RegionId = 7
                        },
                        new
                        {
                            Id = 126,
                            CountryName = "Guinea",
                            RegionId = 7
                        },
                        new
                        {
                            Id = 127,
                            CountryName = "Uganda",
                            RegionId = 7
                        },
                        new
                        {
                            Id = 128,
                            CountryName = "Nigeria",
                            RegionId = 7
                        },
                        new
                        {
                            Id = 129,
                            CountryName = "Libya",
                            RegionId = 7
                        },
                        new
                        {
                            Id = 130,
                            CountryName = "Cabo Verde",
                            RegionId = 7
                        },
                        new
                        {
                            Id = 131,
                            CountryName = "Lesotho",
                            RegionId = 7
                        });
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.GenericMarketBoundaries", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityAlwaysColumn();

                    b.Property<int>("CountryId")
                        .HasColumnType("integer")
                        .HasColumnName("country_id");

                    b.Property<bool>("IsRailAvailable")
                        .HasColumnType("boolean")
                        .HasColumnName("is_rail_available");

                    b.Property<bool>("IsRoadAvailable")
                        .HasColumnType("boolean")
                        .HasColumnName("is_road_available");

                    b.Property<DateTimeOffset?>("LastModifiedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_date_time");

                    b.Property<decimal>("MaxSegmentLengthMtrs")
                        .HasColumnType("numeric")
                        .HasColumnName("max_segment_length_mtrs");

                    b.Property<decimal>("MaxSegmentWeightTon")
                        .HasColumnType("numeric")
                        .HasColumnName("max_segment_weight_ton");

                    b.Property<decimal>("MaxTowerBaseDiameterMtrs")
                        .HasColumnType("numeric")
                        .HasColumnName("max_tower_base_diameter_mtrs");

                    b.Property<DateTimeOffset?>("RecordInsertDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("record_insert_date_time");

                    b.HasKey("Id")
                        .HasName("pk_generic_market_boundaries");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("ix_generic_market_boundaries_country_id");

                    b.ToTable("generic_market_boundaries");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.LogisticConstraint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityAlwaysColumn();

                    b.Property<bool>("IsGenericMarketBoundaryAvailable")
                        .HasColumnType("boolean")
                        .HasColumnName("is_generic_market_boundary_available");

                    b.Property<bool>("IsProjectSpecificBoundaryAvailable")
                        .HasColumnType("boolean")
                        .HasColumnName("is_project_specific_boundary_available");

                    b.Property<DateTimeOffset?>("LastModifiedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_date_time");

                    b.Property<int?>("LogisticStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("logistic_status_id");

                    b.Property<decimal>("MaxSegmentLengthMtrs")
                        .HasColumnType("numeric")
                        .HasColumnName("max_segment_length_mtrs");

                    b.Property<decimal>("MaxSegmentWeightTon")
                        .HasColumnType("numeric")
                        .HasColumnName("max_segment_weight_ton");

                    b.Property<decimal>("MaxTowerBaseDiameterMtrs")
                        .HasColumnType("numeric")
                        .HasColumnName("max_tower_base_diameter_mtrs");

                    b.Property<string>("PreliminaryLogisticsDocumentLink")
                        .HasColumnType("text")
                        .HasColumnName("preliminary_logistics_document_link");

                    b.Property<int>("ProjectConstraintId")
                        .HasColumnType("integer")
                        .HasColumnName("project_constraint_id");

                    b.Property<DateTimeOffset?>("RecordInsertDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("record_insert_date_time");

                    b.Property<string>("RoadSurveyDocumentLink")
                        .HasColumnType("text")
                        .HasColumnName("road_survey_document_link");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer")
                        .HasColumnName("status_id");

                    b.Property<int>("TransportMode")
                        .HasColumnType("integer")
                        .HasColumnName("transport_mode");

                    b.HasKey("Id")
                        .HasName("pk_logistic_constraints");

                    b.HasIndex("LogisticStatusId")
                        .HasDatabaseName("ix_logistic_constraints_logistic_status_id");

                    b.HasIndex("ProjectConstraintId")
                        .IsUnique()
                        .HasDatabaseName("ix_logistic_constraints_project_constraint_id");

                    b.ToTable("logistic_constraints");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.LogisticStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityAlwaysColumn();

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_logistic_statuses");

                    b.ToTable("logistic_statuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Status = "not available (use generic market boundaries)"
                        },
                        new
                        {
                            Id = 2,
                            Status = "order received for Preliminary Logistics Assessment"
                        },
                        new
                        {
                            Id = 3,
                            Status = "Preliminary Logistics Assessment available (for project-specific boundaries)"
                        },
                        new
                        {
                            Id = 4,
                            Status = "order received for Road Survey"
                        },
                        new
                        {
                            Id = 5,
                            Status = "Road Survey available"
                        });
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.MileStone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("LastModifiedDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_modified_date_time");

                    b.Property<string>("MileStoneName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("mile_stone_name");

                    b.Property<DateTime?>("RecordInsertDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("record_insert_date_time");

                    b.HasKey("Id")
                        .HasName("pk_mile_stones");

                    b.ToTable("mile_stones");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LastModifiedDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MileStoneName = "PM020 - Bid decision"
                        },
                        new
                        {
                            Id = 2,
                            LastModifiedDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MileStoneName = "PM040 - Binding offer"
                        },
                        new
                        {
                            Id = 3,
                            LastModifiedDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MileStoneName = "PM070 - Contract signature"
                        },
                        new
                        {
                            Id = 4,
                            LastModifiedDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MileStoneName = "PM080 - Notice to proceed"
                        },
                        new
                        {
                            Id = 5,
                            LastModifiedDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MileStoneName = "Certification Target Date"
                        },
                        new
                        {
                            Id = 6,
                            LastModifiedDateTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MileStoneName = "PM650 - Take-over to customer"
                        });
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("LastModifiedDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_modified_date_time");

                    b.Property<int>("PermissionType")
                        .HasColumnType("integer")
                        .HasColumnName("permission_type");

                    b.Property<int>("ProjectModuleId")
                        .HasColumnType("integer")
                        .HasColumnName("project_module_id");

                    b.Property<DateTime>("RecordInsertDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("record_insert_date_time");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_permissions");

                    b.HasIndex("ProjectModuleId")
                        .HasDatabaseName("ix_permissions_project_module_id");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_permissions_role_id");

                    b.ToTable("permissions");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.PermitsSalesConstraint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityAlwaysColumn();

                    b.Property<int>("BuildingPermits")
                        .HasColumnType("integer")
                        .HasColumnName("building_permits");

                    b.Property<bool>("ElevationFoundationStatus")
                        .HasColumnType("boolean")
                        .HasColumnName("elevation_foundation_status");

                    b.Property<DateTimeOffset?>("LastModifiedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_date_time");

                    b.Property<decimal?>("MaxElevationFoundationMtrs")
                        .HasColumnType("numeric")
                        .HasColumnName("max_elevation_foundation_mtrs");

                    b.Property<decimal>("MaxGroundClearanceMtrs")
                        .HasColumnType("numeric")
                        .HasColumnName("max_ground_clearance_mtrs");

                    b.Property<int>("MaxGroundClearanceStatus")
                        .HasColumnType("integer")
                        .HasColumnName("max_ground_clearance_status");

                    b.Property<decimal>("MaxHubHeightMtrs")
                        .HasColumnType("numeric")
                        .HasColumnName("max_hub_height_mtrs");

                    b.Property<int>("MaxHubHeightStatus")
                        .HasColumnType("integer")
                        .HasColumnName("max_hub_height_status");

                    b.Property<decimal>("MaxTipHeightMtrs")
                        .HasColumnType("numeric")
                        .HasColumnName("max_tip_height_mtrs");

                    b.Property<int>("MaxTipHeightStatus")
                        .HasColumnType("integer")
                        .HasColumnName("max_tip_height_status");

                    b.Property<int>("ProjectConstraintId")
                        .HasColumnType("integer")
                        .HasColumnName("project_constraint_id");

                    b.Property<DateTimeOffset?>("RecordInsertDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("record_insert_date_time");

                    b.HasKey("Id")
                        .HasName("pk_permits_sales_constraints");

                    b.HasIndex("ProjectConstraintId")
                        .IsUnique()
                        .HasDatabaseName("ix_permits_sales_constraints_project_constraint_id");

                    b.ToTable("permits_sales_constraints");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityAlwaysColumn();

                    b.Property<string>("ActiveRecordIndicator")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("active_record_indicator");

                    b.Property<string>("ContractStatus")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("contract_status");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer")
                        .HasColumnName("country_id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("created_by");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("customer_name");

                    b.Property<DateTimeOffset?>("LastModifiedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_date_time");

                    b.Property<string>("OpportunityId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("opportunity_id");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("project_name");

                    b.Property<DateTime?>("RecordEndDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("record_end_date_time");

                    b.Property<DateTimeOffset?>("RecordInsertDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("record_insert_date_time");

                    b.Property<string>("SSTRequestSimilarProjects")
                        .HasColumnType("text")
                        .HasColumnName("sst_request_similar_projects");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_projects");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("ix_projects_country_id");

                    b.HasIndex("OpportunityId")
                        .IsUnique()
                        .HasDatabaseName("ix_projects_opportunity_id");

                    b.HasIndex("ProjectName")
                        .IsUnique()
                        .HasDatabaseName("ix_projects_project_name");

                    b.ToTable("projects");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.ProjectConstraint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTimeOffset?>("LastModifiedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_date_time");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer")
                        .HasColumnName("project_id");

                    b.Property<DateTimeOffset?>("RecordInsertDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("record_insert_date_time");

                    b.HasKey("Id")
                        .HasName("pk_project_constraints");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_project_constraints_project_id");

                    b.HasIndex("Id", "ProjectId")
                        .IsUnique()
                        .HasDatabaseName("ix_project_constraints_id_project_id");

                    b.ToTable("project_constraints");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.ProjectMileStones", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("MileStoneDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("mile_stone_date");

                    b.Property<int>("MileStoneId")
                        .HasColumnType("integer")
                        .HasColumnName("mile_stone_id");

                    b.Property<string>("MileStoneOfferStatus")
                        .HasColumnType("text")
                        .HasColumnName("mile_stone_offer_status");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer")
                        .HasColumnName("project_id");

                    b.HasKey("Id")
                        .HasName("pk_project_mile_stones");

                    b.HasIndex("MileStoneId")
                        .HasDatabaseName("ix_project_mile_stones_mile_stone_id");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_project_mile_stones_project_id");

                    b.ToTable("project_mile_stones");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.ProjectModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("LastModifiedDateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_modified_date_time");

                    b.Property<string>("ModuleDescription")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("module_description");

                    b.Property<string>("ModuleName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("module_name");

                    b.Property<DateTime>("RecordInsertDateTime")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("record_insert_date_time");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_project_modules");

                    b.ToTable("project_modules");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.ProjectRoles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer")
                        .HasColumnName("project_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<string>("userId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_project_roles");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_project_roles_project_id");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_project_roles_role_id");

                    b.ToTable("project_roles");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.Proposal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityAlwaysColumn();

                    b.Property<string>("ActiveRecordIndicator")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("active_record_indicator");

                    b.Property<DateTime>("CertificationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("certification_date");

                    b.Property<int>("CertificationId")
                        .HasColumnType("integer")
                        .HasColumnName("certification_id");

                    b.Property<bool>("IsMain")
                        .HasColumnType("boolean")
                        .HasColumnName("is_main");

                    b.Property<DateTime?>("LastModifiedDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_modified_date_time");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer")
                        .HasColumnName("project_id");

                    b.Property<string>("ProposalSfId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("proposal_sf_id");

                    b.Property<DateTime?>("RecordEndDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("record_end_date_time");

                    b.Property<DateTime?>("RecordInsertDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("record_insert_date_time");

                    b.HasKey("Id")
                        .HasName("pk_proposals");

                    b.HasIndex("CertificationId")
                        .HasDatabaseName("ix_proposals_certification_id");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_proposals_project_id");

                    b.HasIndex("ProposalSfId")
                        .IsUnique()
                        .HasDatabaseName("ix_proposals_proposal_sf_id");

                    b.ToTable("proposals");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.ProposalTasks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool>("IsCustomer")
                        .HasColumnType("boolean")
                        .HasColumnName("is_customer");

                    b.Property<int>("ProposalId")
                        .HasColumnType("integer")
                        .HasColumnName("proposal_id");

                    b.Property<int>("TaskId")
                        .HasColumnType("integer")
                        .HasColumnName("task_id");

                    b.HasKey("Id")
                        .HasName("pk_proposal_tasks");

                    b.HasIndex("ProposalId")
                        .HasDatabaseName("ix_proposal_tasks_proposal_id");

                    b.HasIndex("TaskId")
                        .HasDatabaseName("ix_proposal_tasks_task_id");

                    b.ToTable("proposal_tasks");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.Quote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityAlwaysColumn();

                    b.Property<DateTime?>("LastModifiedDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_modified_date_time");

                    b.Property<string>("OfferStatus")
                        .HasColumnType("text")
                        .HasColumnName("offer_status");

                    b.Property<bool>("OfferType")
                        .HasColumnType("boolean")
                        .HasColumnName("offer_type");

                    b.Property<int>("ProposalId")
                        .HasColumnType("integer")
                        .HasColumnName("proposal_id");

                    b.Property<string>("QuotationId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("quotation_id");

                    b.Property<string>("QuotationName")
                        .HasColumnType("text")
                        .HasColumnName("quotation_name");

                    b.Property<bool>("QuotationStatus")
                        .HasColumnType("boolean")
                        .HasColumnName("quotation_status");

                    b.Property<DateTime>("QuoteSubmissionDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("quote_submission_date");

                    b.Property<DateTime?>("RecordInsertDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("record_insert_date_time");

                    b.Property<string>("SarCode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("sar_code");

                    b.HasKey("Id")
                        .HasName("pk_quotes");

                    b.HasIndex("ProposalId")
                        .HasDatabaseName("ix_quotes_proposal_id");

                    b.HasIndex("QuotationId")
                        .IsUnique()
                        .HasDatabaseName("ix_quotes_quotation_id");

                    b.ToTable("quotes");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("region_name");

                    b.HasKey("Id")
                        .HasName("pk_regions");

                    b.ToTable("regions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RegionName = "APAC"
                        },
                        new
                        {
                            Id = 2,
                            RegionName = "BRAZIL"
                        },
                        new
                        {
                            Id = 3,
                            RegionName = "INDIA"
                        },
                        new
                        {
                            Id = 4,
                            RegionName = "LATAM"
                        },
                        new
                        {
                            Id = 5,
                            RegionName = "NE&ME"
                        },
                        new
                        {
                            Id = 6,
                            RegionName = "NORTH AMERICA"
                        },
                        new
                        {
                            Id = 7,
                            RegionName = "SE&A"
                        });
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("ActiveRecordIndicator")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("active_record_indicator");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("LastModifiedDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_modified_date_time");

                    b.Property<DateTime?>("RecordInsertDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("record_insert_date_time");

                    b.Property<string>("RoleDescription")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("role_description");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("role_name");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.ToTable("roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            RoleName = "Opportunity Owner / Sales Manger",
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            RoleName = "Proposal Manager",
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            RoleName = "Siting Engineer",
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            RoleName = "Technical Project Manager",
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 5,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            RoleName = "Global Project Engineering",
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 6,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            RoleName = "Planning Towers",
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 7,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            RoleName = "Procurement Manager",
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 8,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            RoleName = "Logistic Pre-Sales Road Engineer",
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 9,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            RoleName = "PR Pre-Sales (Logistic)",
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 10,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            RoleName = "PR Pre-Sales (Construction)",
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 11,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            RoleName = "Construction Technical Office",
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 12,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            RoleName = "Tower Development Structure",
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 13,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            RoleName = "Tower Development Internals / Drawings / BOM",
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 14,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            RoleName = "Customs Tower",
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 15,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            RoleName = "Certification Tower Component Certificate",
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 16,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            RoleName = "Certification SSA",
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        });
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.SarStudy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime>("LastUpdateDTM")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_update_dtm");

                    b.Property<DateTime>("RecordInsertDTM")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("record_insert_dtm");

                    b.HasKey("Id")
                        .HasName("pk_sar_studies");

                    b.ToTable("sar_studies");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.Scenario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityAlwaysColumn();

                    b.Property<DateTimeOffset?>("LastModifiedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_date_time");

                    b.Property<string>("LoadCluster")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("load_cluster");

                    b.Property<int>("Options")
                        .HasColumnType("integer")
                        .HasColumnName("options");

                    b.Property<int>("Progress")
                        .HasColumnType("integer")
                        .HasColumnName("progress");

                    b.Property<DateTimeOffset?>("RecordInsertDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("record_insert_date_time");

                    b.Property<int>("ScenarioNo")
                        .HasColumnType("integer")
                        .HasColumnName("scenario_no");

                    b.Property<int>("ScenarioType")
                        .HasColumnType("integer")
                        .HasColumnName("scenario_type");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("WtgConfigurationId")
                        .HasColumnType("integer")
                        .HasColumnName("wtg_configuration_id");

                    b.HasKey("Id")
                        .HasName("pk_scenarios");

                    b.HasIndex("ScenarioNo")
                        .IsUnique()
                        .HasDatabaseName("ix_scenarios_scenario_no");

                    b.HasIndex("WtgConfigurationId")
                        .HasDatabaseName("ix_scenarios_wtg_configuration_id");

                    b.HasIndex("Id", "WtgConfigurationId")
                        .HasDatabaseName("ix_scenarios_id_wtg_configuration_id");

                    b.ToTable("scenarios");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.ScenarioCostsKpi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityAlwaysColumn();

                    b.Property<decimal>("AepP50Delta")
                        .HasColumnType("numeric")
                        .HasColumnName("aep_p50delta");

                    b.Property<decimal>("AepP50Gross")
                        .HasColumnType("numeric")
                        .HasColumnName("aep_p50gross");

                    b.Property<decimal>("AepP50Net")
                        .HasColumnType("numeric")
                        .HasColumnName("aep_p50net");

                    b.Property<decimal>("CapexDelta")
                        .HasColumnType("numeric")
                        .HasColumnName("capex_delta");

                    b.Property<decimal>("Coe")
                        .HasColumnType("numeric")
                        .HasColumnName("coe");

                    b.Property<decimal>("CoeDelta")
                        .HasColumnType("numeric")
                        .HasColumnName("coe_delta");

                    b.Property<string>("Risks")
                        .HasColumnType("text")
                        .HasColumnName("risks");

                    b.Property<int>("ScenarioId")
                        .HasColumnType("integer")
                        .HasColumnName("scenario_id");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("numeric")
                        .HasColumnName("total_cost");

                    b.Property<decimal>("TotalTowerExwCost")
                        .HasColumnType("numeric")
                        .HasColumnName("total_tower_exw_cost");

                    b.HasKey("Id")
                        .HasName("pk_scenario_costs_kpis");

                    b.HasIndex("ScenarioId")
                        .HasDatabaseName("ix_scenario_costs_kpis_scenario_id");

                    b.ToTable("scenario_costs_kpis");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.ScenarioDesign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityAlwaysColumn();

                    b.Property<decimal>("HubHeight")
                        .HasColumnType("numeric")
                        .HasColumnName("hub_height");

                    b.Property<int>("Lifetime")
                        .HasColumnType("integer")
                        .HasColumnName("lifetime");

                    b.Property<string>("Risks")
                        .HasColumnType("text")
                        .HasColumnName("risks");

                    b.Property<int>("ScenarioId")
                        .HasColumnType("integer")
                        .HasColumnName("scenario_id");

                    b.Property<bool>("StepProgress")
                        .HasColumnType("boolean")
                        .HasColumnName("step_progress");

                    b.Property<decimal>("TowerWeight")
                        .HasColumnType("numeric")
                        .HasColumnName("tower_weight");

                    b.HasKey("Id")
                        .HasName("pk_scenario_designs");

                    b.HasIndex("ScenarioId")
                        .HasDatabaseName("ix_scenario_designs_scenario_id");

                    b.ToTable("scenario_designs");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.SpecialRequirementsSalesConstraint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityAlwaysColumn();

                    b.Property<string>("AdditionalRequirements")
                        .HasColumnType("text")
                        .HasColumnName("additional_requirements");

                    b.Property<string[]>("ExtremeWindConditions")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("extreme_wind_conditions");

                    b.Property<string>("ExtremeWindConditionsOtherDescription")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("extreme_wind_conditions_other_description");

                    b.Property<DateTimeOffset?>("LastModifiedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_date_time");

                    b.Property<bool>("Nearshore")
                        .HasColumnType("boolean")
                        .HasColumnName("nearshore");

                    b.Property<string[]>("ProjReqLimitSupplierSelection")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("proj_req_limit_supplier_selection");

                    b.Property<int>("ProjectConstraintId")
                        .HasColumnType("integer")
                        .HasColumnName("project_constraint_id");

                    b.Property<DateTimeOffset?>("RecordInsertDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("record_insert_date_time");

                    b.Property<bool>("SesimicRequirements")
                        .HasColumnType("boolean")
                        .HasColumnName("sesimic_requirements");

                    b.Property<string>("SesimicRequirementsCountryCode")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("sesimic_requirements_country_code");

                    b.Property<string>("SupplierRequirements")
                        .HasColumnType("text")
                        .HasColumnName("supplier_requirements");

                    b.HasKey("Id")
                        .HasName("pk_special_requirements_sales_constraints");

                    b.HasIndex("ProjectConstraintId")
                        .IsUnique()
                        .HasDatabaseName("ix_special_requirements_sales_constraints_project_constraint_id");

                    b.ToTable("special_requirements_sales_constraints");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.SwatLoad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityAlwaysColumn();

                    b.Property<bool>("Acs2xEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("acs2x_enabled");

                    b.Property<decimal[]>("AepGrossInGhw")
                        .IsRequired()
                        .HasColumnType("numeric[]")
                        .HasColumnName("aep_gross_in_ghw");

                    b.Property<decimal[]>("AepGrossInPercent")
                        .IsRequired()
                        .HasColumnType("numeric[]")
                        .HasColumnName("aep_gross_in_percent");

                    b.Property<decimal[]>("AepNetInGhw")
                        .HasColumnType("numeric[]")
                        .HasColumnName("aep_net_in_ghw");

                    b.Property<decimal[]>("AepNetInPercent")
                        .HasColumnType("numeric[]")
                        .HasColumnName("aep_net_in_percent");

                    b.Property<decimal[]>("AepStepsInM")
                        .IsRequired()
                        .HasColumnType("numeric[]")
                        .HasColumnName("aep_steps_in_m");

                    b.Property<int[]>("ApplicationModes")
                        .IsRequired()
                        .HasColumnType("integer[]")
                        .HasColumnName("application_modes");

                    b.Property<string>("CloeTowerId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("cloe_tower_id");

                    b.Property<string>("ConfigurationId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("configuration_id");

                    b.Property<string>("ElsaFileName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("elsa_file_name");

                    b.Property<decimal>("ElsaFilesize")
                        .HasColumnType("numeric")
                        .HasColumnName("elsa_filesize");

                    b.Property<string[]>("JsonPayload")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("json_payload");

                    b.Property<DateTimeOffset?>("LastModifiedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_date_time");

                    b.Property<string>("LinkToElsaFile")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("link_to_elsa_file");

                    b.Property<string>("LinkToSafalFile")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("link_to_safal_file");

                    b.Property<string>("LoadClusterId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("load_cluster_id");

                    b.Property<DateTimeOffset?>("RecordInsertDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("record_insert_date_time");

                    b.Property<decimal>("RnaLifetime")
                        .HasColumnType("numeric")
                        .HasColumnName("rna_lifetime");

                    b.Property<decimal>("RnaLoadsMargin")
                        .HasColumnType("numeric")
                        .HasColumnName("rna_loads_margin");

                    b.Property<string>("RnaSuitability")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("rna_suitability");

                    b.Property<string>("SafalFileName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("safal_file_name");

                    b.Property<decimal>("SafalFilesize")
                        .HasColumnType("numeric")
                        .HasColumnName("safal_filesize");

                    b.Property<string>("SarCode")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("sar_code");

                    b.Property<decimal>("SiteLatitude")
                        .HasColumnType("numeric")
                        .HasColumnName("site_latitude");

                    b.Property<decimal>("SiteLongitude")
                        .HasColumnType("numeric")
                        .HasColumnName("site_longitude");

                    b.Property<decimal>("TowerHubHeightStandardScenario")
                        .HasColumnType("numeric")
                        .HasColumnName("tower_hub_height_standard_scenario");

                    b.Property<decimal>("TowerLoadsMargin")
                        .HasColumnType("numeric")
                        .HasColumnName("tower_loads_margin");

                    b.Property<string>("TowerTypeSwat")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("tower_type_swat");

                    b.Property<int>("TurbineQuantity")
                        .HasColumnType("integer")
                        .HasColumnName("turbine_quantity");

                    b.Property<string>("TurbineType")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("turbine_type");

                    b.Property<decimal>("WindShear")
                        .HasColumnType("numeric")
                        .HasColumnName("wind_shear");

                    b.HasKey("Id")
                        .HasName("pk_swat_loads");

                    b.ToTable("swat_loads");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime?>("LastModifiedDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_modified_date_time");

                    b.Property<DateTime?>("RecordInsertDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("record_insert_date_time");

                    b.Property<string>("TaskName")
                        .HasColumnType("text")
                        .HasColumnName("task_name");

                    b.HasKey("Id")
                        .HasName("pk_tasks");

                    b.ToTable("tasks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TaskName = "Tower design"
                        },
                        new
                        {
                            Id = 2,
                            TaskName = "Foundation design"
                        },
                        new
                        {
                            Id = 3,
                            TaskName = "Anchor Cage design"
                        },
                        new
                        {
                            Id = 4,
                            TaskName = "Preliminary Logistic Assessment"
                        },
                        new
                        {
                            Id = 5,
                            TaskName = "Road Survey"
                        },
                        new
                        {
                            Id = 6,
                            TaskName = "Transport oversea"
                        },
                        new
                        {
                            Id = 7,
                            TaskName = "Transport inland"
                        },
                        new
                        {
                            Id = 8,
                            TaskName = "Anchor cage delivery"
                        },
                        new
                        {
                            Id = 9,
                            TaskName = "Foundation construction"
                        },
                        new
                        {
                            Id = 10,
                            TaskName = "Tower installation"
                        });
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.TowersiteListRegion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityAlwaysColumn();

                    b.Property<DateTimeOffset?>("LastModifiedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_date_time");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<DateTimeOffset?>("RecordInsertDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("record_insert_date_time");

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("region_name");

                    b.Property<string>("Units")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("units");

                    b.HasKey("Id")
                        .HasName("pk_towersite_list_regions");

                    b.ToTable("towersite_list_regions");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.TowersiteListTower", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityAlwaysColumn();

                    b.Property<decimal?>("DefaulthubheightM")
                        .HasColumnType("numeric")
                        .HasColumnName("defaulthubheight_m");

                    b.Property<decimal?>("DefaultmaxsectiondiameterM")
                        .HasColumnType("numeric")
                        .HasColumnName("defaultmaxsectiondiameter_m");

                    b.Property<decimal?>("DefaultmaxsectionlengthM")
                        .HasColumnType("numeric")
                        .HasColumnName("defaultmaxsectionlength_m");

                    b.Property<int?>("Defaultmaxsectionnumber")
                        .HasColumnType("integer")
                        .HasColumnName("defaultmaxsectionnumber");

                    b.Property<decimal?>("DefaultmaxsectionweightKg")
                        .HasColumnType("numeric")
                        .HasColumnName("defaultmaxsectionweight_kg");

                    b.Property<string>("Description")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("description");

                    b.Property<string>("Gpcode")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("gpcode");

                    b.Property<decimal?>("HubheightM")
                        .HasColumnType("numeric")
                        .HasColumnName("hubheight_m");

                    b.Property<decimal?>("HubheightmaxM")
                        .HasColumnType("numeric")
                        .HasColumnName("hubheightmax_m");

                    b.Property<decimal?>("HubheightminM")
                        .HasColumnType("numeric")
                        .HasColumnName("hubheightmin_m");

                    b.Property<DateTimeOffset?>("LastModifiedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_date_time");

                    b.Property<string>("Platform")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("platform");

                    b.Property<DateTimeOffset?>("RecordInsertDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("record_insert_date_time");

                    b.Property<string>("Technology")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("technology");

                    b.Property<decimal?>("TotaltowerweightKg")
                        .HasColumnType("numeric")
                        .HasColumnName("totaltowerweight_kg");

                    b.Property<string>("Tower")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("tower");

                    b.Property<string>("Wtgmachine")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("wtgmachine");

                    b.HasKey("Id")
                        .HasName("pk_towersite_list_towers");

                    b.ToTable("towersite_list_towers");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.WtgCatalogue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<float>("WtgSizeMW")
                        .HasColumnType("real")
                        .HasColumnName("wtg_size_mw");

                    b.Property<string>("WtgType")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("wtg_type");

                    b.HasKey("Id")
                        .HasName("pk_wtg_catalogues");

                    b.ToTable("wtg_catalogues");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            WtgSizeMW = 6f,
                            WtgType = "SG 6.0-170"
                        },
                        new
                        {
                            Id = 2,
                            WtgSizeMW = 6f,
                            WtgType = "SG 6.0-155"
                        },
                        new
                        {
                            Id = 3,
                            WtgSizeMW = 5f,
                            WtgType = "SG 5.0-145"
                        },
                        new
                        {
                            Id = 4,
                            WtgSizeMW = 5f,
                            WtgType = "SG 5.0-132"
                        },
                        new
                        {
                            Id = 5,
                            WtgSizeMW = 4f,
                            WtgType = "SG 4.5-145"
                        },
                        new
                        {
                            Id = 6,
                            WtgSizeMW = 4f,
                            WtgType = "SG 4.5-132"
                        },
                        new
                        {
                            Id = 7,
                            WtgSizeMW = 3.465f,
                            WtgType = "SG 3.4-132 CIIA"
                        },
                        new
                        {
                            Id = 8,
                            WtgSizeMW = 3.465f,
                            WtgType = "SG 3.4-132 CIA"
                        },
                        new
                        {
                            Id = 9,
                            WtgSizeMW = 3.465f,
                            WtgType = "SG 3.4-145 CS"
                        },
                        new
                        {
                            Id = 10,
                            WtgSizeMW = 2.625f,
                            WtgType = "SG 2.6-114 CIA"
                        },
                        new
                        {
                            Id = 11,
                            WtgSizeMW = 2.625f,
                            WtgType = "SG 2.6-114 CIIA MY18"
                        },
                        new
                        {
                            Id = 12,
                            WtgSizeMW = 2.625f,
                            WtgType = "SG 2.6-114 CS MY20"
                        },
                        new
                        {
                            Id = 13,
                            WtgSizeMW = 2.14f,
                            WtgType = "SG 2.1-114 CIIA/IIIA MY18"
                        },
                        new
                        {
                            Id = 14,
                            WtgSizeMW = 2.2f,
                            WtgType = "SG 2.2-122"
                        });
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.WtgConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityAlwaysColumn();

                    b.Property<DateTime?>("LastModifiedDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_modified_date_time");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<bool>("QuantityTrigger")
                        .HasColumnType("boolean")
                        .HasColumnName("quantity_trigger");

                    b.Property<int>("QuoteId")
                        .HasColumnType("integer")
                        .HasColumnName("quote_id");

                    b.Property<DateTime?>("RecordInsertDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("record_insert_date_time");

                    b.Property<int>("WindfarmSize")
                        .HasColumnType("integer")
                        .HasColumnName("windfarm_size");

                    b.Property<bool>("WindfarmSizeTrigger")
                        .HasColumnType("boolean")
                        .HasColumnName("windfarm_size_trigger");

                    b.Property<int>("WtgCatalogueId")
                        .HasColumnType("integer")
                        .HasColumnName("wtg_catalogue_id");

                    b.HasKey("Id")
                        .HasName("pk_wtg_configurations");

                    b.HasIndex("QuoteId")
                        .HasDatabaseName("ix_wtg_configurations_quote_id");

                    b.HasIndex("WtgCatalogueId")
                        .HasDatabaseName("ix_wtg_configurations_wtg_catalogue_id");

                    b.ToTable("wtg_configurations");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.WtgThreshold", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityAlwaysColumn();

                    b.Property<int>("TurbineQuantity")
                        .HasColumnType("integer")
                        .HasColumnName("turbine_quantity");

                    b.Property<int>("WindFarmSize")
                        .HasColumnType("integer")
                        .HasColumnName("wind_farm_size");

                    b.HasKey("Id")
                        .HasName("pk_wtg_thresholds");

                    b.ToTable("wtg_thresholds");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TurbineQuantity = 20,
                            WindFarmSize = 100
                        });
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.ConstructionConstraint", b =>
                {
                    b.HasOne("SGRE.TSA.DataStore.API.Models.ProjectConstraint", "ProjectConstraint")
                        .WithOne("ConstructionConstraint")
                        .HasForeignKey("SGRE.TSA.DataStore.API.Models.ConstructionConstraint", "ProjectConstraintId")
                        .HasConstraintName("fk_construction_constraints_project_constraints_project_constr")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectConstraint");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.Country", b =>
                {
                    b.HasOne("SGRE.TSA.DataStore.API.Models.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .HasConstraintName("fk_countries_regions_region_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.GenericMarketBoundaries", b =>
                {
                    b.HasOne("SGRE.TSA.DataStore.API.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .HasConstraintName("fk_generic_market_boundaries_countries_country_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.LogisticConstraint", b =>
                {
                    b.HasOne("SGRE.TSA.DataStore.API.Models.LogisticStatus", "LogisticStatus")
                        .WithMany()
                        .HasForeignKey("LogisticStatusId")
                        .HasConstraintName("fk_logistic_constraints_logistic_statuses_logistic_status_id");

                    b.HasOne("SGRE.TSA.DataStore.API.Models.ProjectConstraint", "ProjectConstraint")
                        .WithOne("LogisticConstraint")
                        .HasForeignKey("SGRE.TSA.DataStore.API.Models.LogisticConstraint", "ProjectConstraintId")
                        .HasConstraintName("fk_logistic_constraints_project_constraints_project_constraint")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LogisticStatus");

                    b.Navigation("ProjectConstraint");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.Permission", b =>
                {
                    b.HasOne("SGRE.TSA.DataStore.API.Models.ProjectModule", "ProjectModule")
                        .WithMany()
                        .HasForeignKey("ProjectModuleId")
                        .HasConstraintName("fk_permissions_project_modules_project_module_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SGRE.TSA.DataStore.API.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_permissions_roles_role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectModule");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.PermitsSalesConstraint", b =>
                {
                    b.HasOne("SGRE.TSA.DataStore.API.Models.ProjectConstraint", "ProjectConstraints")
                        .WithOne("PermitsSalesConstraint")
                        .HasForeignKey("SGRE.TSA.DataStore.API.Models.PermitsSalesConstraint", "ProjectConstraintId")
                        .HasConstraintName("fk_permits_sales_constraints_project_constraints_project_const")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectConstraints");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.Project", b =>
                {
                    b.HasOne("SGRE.TSA.DataStore.API.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .HasConstraintName("fk_projects_countries_country_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.ProjectConstraint", b =>
                {
                    b.HasOne("SGRE.TSA.DataStore.API.Models.Project", "Project")
                        .WithMany("ProjectConstraints")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("fk_project_constraints_projects_project_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.ProjectMileStones", b =>
                {
                    b.HasOne("SGRE.TSA.DataStore.API.Models.MileStone", "MileStone")
                        .WithMany()
                        .HasForeignKey("MileStoneId")
                        .HasConstraintName("fk_project_mile_stones_mile_stones_mile_stone_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SGRE.TSA.DataStore.API.Models.Project", "Project")
                        .WithMany("ProjectMileStones")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("fk_project_mile_stones_projects_project_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MileStone");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.ProjectRoles", b =>
                {
                    b.HasOne("SGRE.TSA.DataStore.API.Models.Project", "Project")
                        .WithMany("ProjectRoles")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("fk_project_roles_projects_project_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SGRE.TSA.DataStore.API.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_project_roles_roles_role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.Proposal", b =>
                {
                    b.HasOne("SGRE.TSA.DataStore.API.Models.Certification", "Certification")
                        .WithMany()
                        .HasForeignKey("CertificationId")
                        .HasConstraintName("fk_proposals_certifications_certification_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SGRE.TSA.DataStore.API.Models.Project", "Project")
                        .WithMany("Proposals")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("fk_proposals_projects_project_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Certification");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.ProposalTasks", b =>
                {
                    b.HasOne("SGRE.TSA.DataStore.API.Models.Proposal", "Proposal")
                        .WithMany("ProposalTasks")
                        .HasForeignKey("ProposalId")
                        .HasConstraintName("fk_proposal_tasks_proposals_proposal_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SGRE.TSA.DataStore.API.Models.Task", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .HasConstraintName("fk_proposal_tasks_tasks_task_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Proposal");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.Quote", b =>
                {
                    b.HasOne("SGRE.TSA.DataStore.API.Models.Proposal", "Proposal")
                        .WithMany("Quotes")
                        .HasForeignKey("ProposalId")
                        .HasConstraintName("fk_quotes_proposals_proposal_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Proposal");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.Scenario", b =>
                {
                    b.HasOne("SGRE.TSA.DataStore.API.Models.WtgConfiguration", "WtgConfiguration")
                        .WithMany("Scenarios")
                        .HasForeignKey("WtgConfigurationId")
                        .HasConstraintName("fk_scenarios_wtg_configurations_wtg_configuration_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WtgConfiguration");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.ScenarioCostsKpi", b =>
                {
                    b.HasOne("SGRE.TSA.DataStore.API.Models.Scenario", "Scenario")
                        .WithMany("ScenarioCostsKpis")
                        .HasForeignKey("ScenarioId")
                        .HasConstraintName("fk_scenario_costs_kpis_scenarios_scenario_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Scenario");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.ScenarioDesign", b =>
                {
                    b.HasOne("SGRE.TSA.DataStore.API.Models.Scenario", "Scenario")
                        .WithMany("ScenarioDesigns")
                        .HasForeignKey("ScenarioId")
                        .HasConstraintName("fk_scenario_designs_scenarios_scenario_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Scenario");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.SpecialRequirementsSalesConstraint", b =>
                {
                    b.HasOne("SGRE.TSA.DataStore.API.Models.ProjectConstraint", "ProjectConstraint")
                        .WithOne("SpecialRequirementsSalesConstraint")
                        .HasForeignKey("SGRE.TSA.DataStore.API.Models.SpecialRequirementsSalesConstraint", "ProjectConstraintId")
                        .HasConstraintName("fk_special_requirements_sales_constraints_project_constraints_")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectConstraint");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.WtgConfiguration", b =>
                {
                    b.HasOne("SGRE.TSA.DataStore.API.Models.Quote", "Quote")
                        .WithMany("WtgConfigurations")
                        .HasForeignKey("QuoteId")
                        .HasConstraintName("fk_wtg_configurations_quotes_quote_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SGRE.TSA.DataStore.API.Models.WtgCatalogue", "WtgCatalogue")
                        .WithMany()
                        .HasForeignKey("WtgCatalogueId")
                        .HasConstraintName("fk_wtg_configurations_wtg_catalogues_wtg_catalogue_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quote");

                    b.Navigation("WtgCatalogue");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.Project", b =>
                {
                    b.Navigation("ProjectConstraints");

                    b.Navigation("ProjectMileStones");

                    b.Navigation("ProjectRoles");

                    b.Navigation("Proposals");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.ProjectConstraint", b =>
                {
                    b.Navigation("ConstructionConstraint");

                    b.Navigation("LogisticConstraint");

                    b.Navigation("PermitsSalesConstraint");

                    b.Navigation("SpecialRequirementsSalesConstraint");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.Proposal", b =>
                {
                    b.Navigation("ProposalTasks");

                    b.Navigation("Quotes");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.Quote", b =>
                {
                    b.Navigation("WtgConfigurations");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.Scenario", b =>
                {
                    b.Navigation("ScenarioCostsKpis");

                    b.Navigation("ScenarioDesigns");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.WtgConfiguration", b =>
                {
                    b.Navigation("Scenarios");
                });
#pragma warning restore 612, 618
        }
    }
}
