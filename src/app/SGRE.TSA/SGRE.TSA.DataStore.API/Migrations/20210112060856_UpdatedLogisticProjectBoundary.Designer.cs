// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SGRE.TSA.DataStore.API;

namespace SGRE.TSA.DataStore.API.Migrations
{
    [DbContext(typeof(TsaContext))]
    [Migration("20210112060856_UpdatedLogisticProjectBoundary")]
    partial class UpdatedLogisticProjectBoundary
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.Certification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityAlwaysColumn();

                    b.Property<string>("CertificationName")
                        .HasColumnType("text")
                        .HasColumnName("certification_name");

                    b.HasKey("Id")
                        .HasName("pk_certifications");

                    b.ToTable("certifications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CertificationName = "Tower component certificate"
                        },
                        new
                        {
                            Id = 2,
                            CertificationName = "Site Suitability Design Assessment (SSDA)"
                        },
                        new
                        {
                            Id = 3,
                            CertificationName = "Tower component certificate & Site Suitability Design Assessment (SSDA)"
                        },
                        new
                        {
                            Id = 4,
                            CertificationName = "none"
                        });
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.ConstructionConstraint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityAlwaysColumn();

                    b.Property<string>("AdditionalRequirements")
                        .HasColumnType("text")
                        .HasColumnName("additional_requirements");

                    b.Property<decimal>("CraneLiftingHeighMtrs")
                        .HasColumnType("numeric")
                        .HasColumnName("crane_lifting_heigh_mtrs");

                    b.Property<decimal>("CraneLiftingWeightTon")
                        .HasColumnType("numeric")
                        .HasColumnName("crane_lifting_weight_ton");

                    b.Property<DateTimeOffset?>("LastModifiedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_date_time");

                    b.Property<int>("ProjectConstraintId")
                        .HasColumnType("integer")
                        .HasColumnName("project_constraint_id");

                    b.Property<DateTimeOffset?>("RecordInsertDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("record_insert_date_time");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_construction_constraints");

                    b.HasIndex("ProjectConstraintId")
                        .IsUnique()
                        .HasDatabaseName("ix_construction_constraints_project_constraint_id");

                    b.ToTable("construction_constraints");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityAlwaysColumn();

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("country_name");

                    b.Property<int>("RegionId")
                        .HasColumnType("integer")
                        .HasColumnName("region_id");

                    b.HasKey("Id")
                        .HasName("pk_countries");

                    b.HasIndex("RegionId")
                        .HasDatabaseName("ix_countries_region_id");

                    b.ToTable("countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryName = "China",
                            RegionId = 1
                        },
                        new
                        {
                            Id = 2,
                            CountryName = "Japan",
                            RegionId = 1
                        },
                        new
                        {
                            Id = 3,
                            CountryName = "South Korea",
                            RegionId = 1
                        },
                        new
                        {
                            Id = 4,
                            CountryName = "Australia",
                            RegionId = 1
                        },
                        new
                        {
                            Id = 5,
                            CountryName = "Vietnam",
                            RegionId = 1
                        },
                        new
                        {
                            Id = 6,
                            CountryName = "New Zealand",
                            RegionId = 1
                        },
                        new
                        {
                            Id = 7,
                            CountryName = "Philippines",
                            RegionId = 1
                        },
                        new
                        {
                            Id = 8,
                            CountryName = "Indonesia",
                            RegionId = 1
                        },
                        new
                        {
                            Id = 9,
                            CountryName = "Taiwan",
                            RegionId = 1
                        },
                        new
                        {
                            Id = 10,
                            CountryName = "Pakistan",
                            RegionId = 1
                        },
                        new
                        {
                            Id = 11,
                            CountryName = "Mongolia",
                            RegionId = 1
                        },
                        new
                        {
                            Id = 12,
                            CountryName = "Thailand",
                            RegionId = 1
                        },
                        new
                        {
                            Id = 13,
                            CountryName = "Myanmar",
                            RegionId = 1
                        },
                        new
                        {
                            Id = 14,
                            CountryName = "New Caledonia",
                            RegionId = 1
                        },
                        new
                        {
                            Id = 15,
                            CountryName = "Cambodia",
                            RegionId = 1
                        },
                        new
                        {
                            Id = 16,
                            CountryName = "Laos",
                            RegionId = 1
                        },
                        new
                        {
                            Id = 17,
                            CountryName = "Brazil",
                            RegionId = 2
                        },
                        new
                        {
                            Id = 18,
                            CountryName = "India",
                            RegionId = 3
                        },
                        new
                        {
                            Id = 19,
                            CountryName = "Sri Lanka",
                            RegionId = 3
                        },
                        new
                        {
                            Id = 20,
                            CountryName = "Bangladesh",
                            RegionId = 3
                        },
                        new
                        {
                            Id = 21,
                            CountryName = "Brazil",
                            RegionId = 4
                        },
                        new
                        {
                            Id = 22,
                            CountryName = "Mexico",
                            RegionId = 4
                        },
                        new
                        {
                            Id = 23,
                            CountryName = "Peru",
                            RegionId = 4
                        },
                        new
                        {
                            Id = 24,
                            CountryName = "Dominican Rep.",
                            RegionId = 4
                        },
                        new
                        {
                            Id = 25,
                            CountryName = "Argentina",
                            RegionId = 4
                        },
                        new
                        {
                            Id = 26,
                            CountryName = "Panama",
                            RegionId = 4
                        },
                        new
                        {
                            Id = 27,
                            CountryName = "Chile",
                            RegionId = 4
                        },
                        new
                        {
                            Id = 28,
                            CountryName = "Uruguay",
                            RegionId = 4
                        },
                        new
                        {
                            Id = 29,
                            CountryName = "Colombia",
                            RegionId = 4
                        },
                        new
                        {
                            Id = 30,
                            CountryName = "Belize",
                            RegionId = 4
                        },
                        new
                        {
                            Id = 31,
                            CountryName = "Nicaragua",
                            RegionId = 4
                        },
                        new
                        {
                            Id = 32,
                            CountryName = "Jamaica",
                            RegionId = 4
                        },
                        new
                        {
                            Id = 33,
                            CountryName = "Guatemala",
                            RegionId = 4
                        },
                        new
                        {
                            Id = 34,
                            CountryName = "Honduras",
                            RegionId = 4
                        },
                        new
                        {
                            Id = 35,
                            CountryName = "Costa Rica",
                            RegionId = 4
                        },
                        new
                        {
                            Id = 36,
                            CountryName = "El Salvador",
                            RegionId = 4
                        },
                        new
                        {
                            Id = 37,
                            CountryName = "Cuba",
                            RegionId = 4
                        },
                        new
                        {
                            Id = 38,
                            CountryName = "Dominica",
                            RegionId = 4
                        },
                        new
                        {
                            Id = 39,
                            CountryName = "Guyana",
                            RegionId = 4
                        },
                        new
                        {
                            Id = 40,
                            CountryName = "Ecuador",
                            RegionId = 4
                        },
                        new
                        {
                            Id = 41,
                            CountryName = "Guadeloupe",
                            RegionId = 4
                        },
                        new
                        {
                            Id = 42,
                            CountryName = "Puerto Rico",
                            RegionId = 4
                        },
                        new
                        {
                            Id = 43,
                            CountryName = "Trinidad Tobago",
                            RegionId = 4
                        },
                        new
                        {
                            Id = 44,
                            CountryName = "Bahamas",
                            RegionId = 4
                        },
                        new
                        {
                            Id = 45,
                            CountryName = "Bolivia",
                            RegionId = 4
                        },
                        new
                        {
                            Id = 46,
                            CountryName = "Barbados",
                            RegionId = 4
                        },
                        new
                        {
                            Id = 47,
                            CountryName = "Ireland",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 48,
                            CountryName = "Sweden",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 49,
                            CountryName = "Germany",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 50,
                            CountryName = "Romania",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 51,
                            CountryName = "Croatia",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 52,
                            CountryName = "Finland",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 53,
                            CountryName = "Belgium",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 54,
                            CountryName = "Uzbekistan",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 55,
                            CountryName = "Serbia",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 56,
                            CountryName = "United Kingdom",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 57,
                            CountryName = "Poland",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 58,
                            CountryName = "Saudi Arabia",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 59,
                            CountryName = "Denmark",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 60,
                            CountryName = "Utd Arab Emir.",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 61,
                            CountryName = "Ukraine",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 62,
                            CountryName = "Bulgaria",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 63,
                            CountryName = "Azerbaijan",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 64,
                            CountryName = "Turkey",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 65,
                            CountryName = "Norway",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 66,
                            CountryName = "Moldovia",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 67,
                            CountryName = "Iran Islamic Republic of",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 68,
                            CountryName = "Russian Fed.",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 69,
                            CountryName = "Bosnia-Herz.",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 70,
                            CountryName = "Israel",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 71,
                            CountryName = "Lebanon",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 72,
                            CountryName = "Kazakhstan",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 73,
                            CountryName = "Slovenia",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 74,
                            CountryName = "Netherlands",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 75,
                            CountryName = "Hungary",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 76,
                            CountryName = "Albania",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 77,
                            CountryName = "Austria",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 78,
                            CountryName = "Oman",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 79,
                            CountryName = "Switzerland",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 80,
                            CountryName = "Georgia",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 81,
                            CountryName = "Syrian Arab Republic",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 82,
                            CountryName = "Macedonia",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 83,
                            CountryName = "Luxembourg",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 84,
                            CountryName = "Kuwait",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 85,
                            CountryName = "Czech Republic",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 86,
                            CountryName = "Yemen",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 87,
                            CountryName = "Belarus",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 88,
                            CountryName = "Lithuania",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 89,
                            CountryName = "Iceland",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 90,
                            CountryName = "Estonia",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 91,
                            CountryName = "Latvia",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 92,
                            CountryName = "Armenia",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 93,
                            CountryName = "Montenegro",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 94,
                            CountryName = "Faroe Islands",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 95,
                            CountryName = "Bahrain",
                            RegionId = 5
                        },
                        new
                        {
                            Id = 96,
                            CountryName = "USA",
                            RegionId = 6
                        },
                        new
                        {
                            Id = 97,
                            CountryName = "Canada",
                            RegionId = 6
                        },
                        new
                        {
                            Id = 98,
                            CountryName = "France",
                            RegionId = 7
                        },
                        new
                        {
                            Id = 99,
                            CountryName = "Spain",
                            RegionId = 7
                        },
                        new
                        {
                            Id = 100,
                            CountryName = "Greece",
                            RegionId = 7
                        },
                        new
                        {
                            Id = 101,
                            CountryName = "Morocco",
                            RegionId = 7
                        },
                        new
                        {
                            Id = 102,
                            CountryName = "Egypt",
                            RegionId = 7
                        },
                        new
                        {
                            Id = 103,
                            CountryName = "South Africa",
                            RegionId = 7
                        },
                        new
                        {
                            Id = 104,
                            CountryName = "Italy",
                            RegionId = 7
                        },
                        new
                        {
                            Id = 105,
                            CountryName = "Ghana",
                            RegionId = 7
                        },
                        new
                        {
                            Id = 106,
                            CountryName = "Mauritius",
                            RegionId = 7
                        },
                        new
                        {
                            Id = 107,
                            CountryName = "Kenya",
                            RegionId = 7
                        },
                        new
                        {
                            Id = 108,
                            CountryName = "Angola",
                            RegionId = 7
                        },
                        new
                        {
                            Id = 109,
                            CountryName = "Togo",
                            RegionId = 7
                        },
                        new
                        {
                            Id = 110,
                            CountryName = "Jordan",
                            RegionId = 7
                        },
                        new
                        {
                            Id = 111,
                            CountryName = "Zambia",
                            RegionId = 7
                        },
                        new
                        {
                            Id = 112,
                            CountryName = "Senegal",
                            RegionId = 7
                        },
                        new
                        {
                            Id = 113,
                            CountryName = "Ethiopia",
                            RegionId = 7
                        },
                        new
                        {
                            Id = 114,
                            CountryName = "Cyprus",
                            RegionId = 7
                        },
                        new
                        {
                            Id = 115,
                            CountryName = "Namibia",
                            RegionId = 7
                        },
                        new
                        {
                            Id = 116,
                            CountryName = "Gambia",
                            RegionId = 7
                        },
                        new
                        {
                            Id = 117,
                            CountryName = "Portugal",
                            RegionId = 7
                        },
                        new
                        {
                            Id = 118,
                            CountryName = "Djibouti",
                            RegionId = 7
                        },
                        new
                        {
                            Id = 119,
                            CountryName = "Mauritania",
                            RegionId = 7
                        },
                        new
                        {
                            Id = 120,
                            CountryName = "Sudan",
                            RegionId = 7
                        },
                        new
                        {
                            Id = 121,
                            CountryName = "Mozambique",
                            RegionId = 7
                        },
                        new
                        {
                            Id = 122,
                            CountryName = "Algeria",
                            RegionId = 7
                        },
                        new
                        {
                            Id = 123,
                            CountryName = "Tunisia",
                            RegionId = 7
                        },
                        new
                        {
                            Id = 124,
                            CountryName = "Tanzania",
                            RegionId = 7
                        },
                        new
                        {
                            Id = 125,
                            CountryName = "Ivory Coast",
                            RegionId = 7
                        },
                        new
                        {
                            Id = 126,
                            CountryName = "Guinea",
                            RegionId = 7
                        },
                        new
                        {
                            Id = 127,
                            CountryName = "Uganda",
                            RegionId = 7
                        },
                        new
                        {
                            Id = 128,
                            CountryName = "Nigeria",
                            RegionId = 7
                        },
                        new
                        {
                            Id = 129,
                            CountryName = "Libya",
                            RegionId = 7
                        },
                        new
                        {
                            Id = 130,
                            CountryName = "Cabo Verde",
                            RegionId = 7
                        },
                        new
                        {
                            Id = 131,
                            CountryName = "Lesotho",
                            RegionId = 7
                        });
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.GenericMarketBoundary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityAlwaysColumn();

                    b.Property<int>("CountryId")
                        .HasColumnType("integer")
                        .HasColumnName("country_id");

                    b.Property<DateTimeOffset?>("LastModifiedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_date_time");

                    b.Property<decimal>("MaxSegmentLengthMtrs")
                        .HasColumnType("numeric")
                        .HasColumnName("max_segment_length_mtrs");

                    b.Property<decimal>("MaxSegmentWeightTon")
                        .HasColumnType("numeric")
                        .HasColumnName("max_segment_weight_ton");

                    b.Property<decimal>("MaxTowerBaseDiameterMtrs")
                        .HasColumnType("numeric")
                        .HasColumnName("max_tower_base_diameter_mtrs");

                    b.Property<DateTimeOffset?>("RecordInsertDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("record_insert_date_time");

                    b.Property<int>("TransportModeId")
                        .HasColumnType("integer")
                        .HasColumnName("transport_mode_id");

                    b.HasKey("Id")
                        .HasName("pk_generic_market_boundaries");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("ix_generic_market_boundaries_country_id");

                    b.HasIndex("TransportModeId")
                        .HasDatabaseName("ix_generic_market_boundaries_transport_mode_id");

                    b.ToTable("generic_market_boundaries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 48,
                            MaxSegmentLengthMtrs = 36m,
                            MaxSegmentWeightTon = 95m,
                            MaxTowerBaseDiameterMtrs = 4.5m,
                            TransportModeId = 1
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 49,
                            MaxSegmentLengthMtrs = 36m,
                            MaxSegmentWeightTon = 85m,
                            MaxTowerBaseDiameterMtrs = 4.3m,
                            TransportModeId = 1
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 65,
                            MaxSegmentLengthMtrs = 36m,
                            MaxSegmentWeightTon = 95m,
                            MaxTowerBaseDiameterMtrs = 4.5m,
                            TransportModeId = 1
                        },
                        new
                        {
                            Id = 4,
                            CountryId = 74,
                            MaxSegmentLengthMtrs = 36m,
                            MaxSegmentWeightTon = 85m,
                            MaxTowerBaseDiameterMtrs = 4.3m,
                            TransportModeId = 1
                        },
                        new
                        {
                            Id = 5,
                            CountryId = 64,
                            MaxSegmentLengthMtrs = 36m,
                            MaxSegmentWeightTon = 95m,
                            MaxTowerBaseDiameterMtrs = 4.8m,
                            TransportModeId = 1
                        },
                        new
                        {
                            Id = 6,
                            CountryId = 98,
                            MaxSegmentLengthMtrs = 36m,
                            MaxSegmentWeightTon = 80m,
                            MaxTowerBaseDiameterMtrs = 4.68m,
                            TransportModeId = 1
                        },
                        new
                        {
                            Id = 7,
                            CountryId = 99,
                            MaxSegmentLengthMtrs = 36m,
                            MaxSegmentWeightTon = 85m,
                            MaxTowerBaseDiameterMtrs = 4.68m,
                            TransportModeId = 1
                        },
                        new
                        {
                            Id = 8,
                            CountryId = 104,
                            MaxSegmentLengthMtrs = 36m,
                            MaxSegmentWeightTon = 85m,
                            MaxTowerBaseDiameterMtrs = 4.68m,
                            TransportModeId = 1
                        },
                        new
                        {
                            Id = 9,
                            CountryId = 22,
                            MaxSegmentLengthMtrs = 30m,
                            MaxSegmentWeightTon = 85m,
                            MaxTowerBaseDiameterMtrs = 4.8m,
                            TransportModeId = 1
                        },
                        new
                        {
                            Id = 10,
                            CountryId = 27,
                            MaxSegmentLengthMtrs = 30m,
                            MaxSegmentWeightTon = 90m,
                            MaxTowerBaseDiameterMtrs = 4.8m,
                            TransportModeId = 1
                        },
                        new
                        {
                            Id = 11,
                            CountryId = 29,
                            MaxSegmentLengthMtrs = 30m,
                            MaxSegmentWeightTon = 90m,
                            MaxTowerBaseDiameterMtrs = 4.8m,
                            TransportModeId = 1
                        },
                        new
                        {
                            Id = 12,
                            CountryId = 25,
                            MaxSegmentLengthMtrs = 30m,
                            MaxSegmentWeightTon = 90m,
                            MaxTowerBaseDiameterMtrs = 4.8m,
                            TransportModeId = 1
                        },
                        new
                        {
                            Id = 13,
                            CountryId = 21,
                            MaxSegmentLengthMtrs = 36m,
                            MaxSegmentWeightTon = 85m,
                            MaxTowerBaseDiameterMtrs = 4.5m,
                            TransportModeId = 1
                        },
                        new
                        {
                            Id = 14,
                            CountryId = 97,
                            MaxSegmentLengthMtrs = 36m,
                            MaxSegmentWeightTon = 72.57m,
                            MaxTowerBaseDiameterMtrs = 4.5m,
                            TransportModeId = 1
                        },
                        new
                        {
                            Id = 15,
                            CountryId = 97,
                            MaxSegmentLengthMtrs = 36m,
                            MaxSegmentWeightTon = 72.57m,
                            MaxTowerBaseDiameterMtrs = 4.115m,
                            TransportModeId = 2
                        },
                        new
                        {
                            Id = 16,
                            CountryId = 1,
                            MaxSegmentLengthMtrs = 36m,
                            MaxSegmentWeightTon = 85m,
                            MaxTowerBaseDiameterMtrs = 4.5m,
                            TransportModeId = 2
                        },
                        new
                        {
                            Id = 17,
                            CountryId = 4,
                            MaxSegmentLengthMtrs = 36m,
                            MaxSegmentWeightTon = 85m,
                            MaxTowerBaseDiameterMtrs = 4.5m,
                            TransportModeId = 1
                        },
                        new
                        {
                            Id = 18,
                            CountryId = 18,
                            MaxSegmentLengthMtrs = 29m,
                            MaxSegmentWeightTon = 70m,
                            MaxTowerBaseDiameterMtrs = 4.5m,
                            TransportModeId = 1
                        });
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.LogisticConstraint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityAlwaysColumn();

                    b.Property<DateTimeOffset?>("LastModifiedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_date_time");

                    b.Property<int>("LogisticStatusId")
                        .HasColumnType("integer")
                        .HasColumnName("logistic_status_id");

                    b.Property<string>("PreliminaryLogisticsDocumentLink")
                        .HasColumnType("text")
                        .HasColumnName("preliminary_logistics_document_link");

                    b.Property<int>("ProjectConstraintId")
                        .HasColumnType("integer")
                        .HasColumnName("project_constraint_id");

                    b.Property<DateTimeOffset?>("RecordInsertDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("record_insert_date_time");

                    b.Property<string>("RoadSurveyDocumentLink")
                        .HasColumnType("text")
                        .HasColumnName("road_survey_document_link");

                    b.HasKey("Id")
                        .HasName("pk_logistic_constraints");

                    b.HasIndex("LogisticStatusId")
                        .HasDatabaseName("ix_logistic_constraints_logistic_status_id");

                    b.HasIndex("ProjectConstraintId")
                        .IsUnique()
                        .HasDatabaseName("ix_logistic_constraints_project_constraint_id");

                    b.ToTable("logistic_constraints");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.LogisticProjectBoundary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityAlwaysColumn();

                    b.Property<DateTimeOffset?>("LastModifiedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_date_time");

                    b.Property<int>("LogisticConstraintId")
                        .HasColumnType("integer")
                        .HasColumnName("logistic_constraint_id");

                    b.Property<decimal>("MaxSegmentLengthMtrs")
                        .HasColumnType("numeric")
                        .HasColumnName("max_segment_length_mtrs");

                    b.Property<decimal>("MaxSegmentWeightTon")
                        .HasColumnType("numeric")
                        .HasColumnName("max_segment_weight_ton");

                    b.Property<decimal>("MaxTowerBaseDiameterMtrs")
                        .HasColumnType("numeric")
                        .HasColumnName("max_tower_base_diameter_mtrs");

                    b.Property<DateTimeOffset?>("RecordInsertDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("record_insert_date_time");

                    b.Property<int>("TransportModeId")
                        .HasColumnType("integer")
                        .HasColumnName("transport_mode_id");

                    b.HasKey("Id")
                        .HasName("pk_logistic_project_boundaries");

                    b.HasIndex("TransportModeId")
                        .HasDatabaseName("ix_logistic_project_boundaries_transport_mode_id");

                    b.HasIndex("LogisticConstraintId", "TransportModeId")
                        .IsUnique()
                        .HasDatabaseName("ix_logistic_project_boundaries_logistic_constraint_id_transpor");

                    b.ToTable("logistic_project_boundaries");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.LogisticStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityAlwaysColumn();

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_logistic_statuses");

                    b.ToTable("logistic_statuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Status = "not available (use generic market boundaries)"
                        },
                        new
                        {
                            Id = 2,
                            Status = "order received for Preliminary Logistics Assessment"
                        },
                        new
                        {
                            Id = 3,
                            Status = "Preliminary Logistics Assessment available (for project-specific boundaries)"
                        },
                        new
                        {
                            Id = 4,
                            Status = "order received for Road Survey"
                        },
                        new
                        {
                            Id = 5,
                            Status = "Road Survey available"
                        });
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.MileStone", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityAlwaysColumn();

                    b.Property<DateTimeOffset?>("LastModifiedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_date_time");

                    b.Property<string>("MileStoneName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("mile_stone_name");

                    b.Property<DateTimeOffset?>("RecordInsertDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("record_insert_date_time");

                    b.HasKey("Id")
                        .HasName("pk_mile_stones");

                    b.ToTable("mile_stones");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MileStoneName = "PM020 - Bid decision"
                        },
                        new
                        {
                            Id = 2,
                            MileStoneName = "PM040 - Binding offer"
                        },
                        new
                        {
                            Id = 3,
                            MileStoneName = "PM070 - Contract signature"
                        },
                        new
                        {
                            Id = 4,
                            MileStoneName = "PM080 - Notice to proceed"
                        },
                        new
                        {
                            Id = 5,
                            MileStoneName = "Certification Target Date"
                        },
                        new
                        {
                            Id = 6,
                            MileStoneName = "PM650 - Take-over to customer"
                        });
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityAlwaysColumn();

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("LastModifiedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_date_time");

                    b.Property<int>("PermissionType")
                        .HasColumnType("integer")
                        .HasColumnName("permission_type");

                    b.Property<int>("ProjectModuleId")
                        .HasColumnType("integer")
                        .HasColumnName("project_module_id");

                    b.Property<DateTimeOffset?>("RecordInsertDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("record_insert_date_time");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_permissions");

                    b.HasIndex("ProjectModuleId")
                        .HasDatabaseName("ix_permissions_project_module_id");

                    b.HasIndex("RoleId", "ProjectModuleId")
                        .HasDatabaseName("ix_permissions_role_id_project_module_id");

                    b.ToTable("permissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(1456), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 2,
                            ProjectModuleId = 1,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(1440), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 1,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(1806), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 2,
                            ProjectModuleId = 1,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(1803), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 2,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(1836), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 1,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(1835), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 3,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(1853), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 1,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(1852), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 4,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 5,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(1870), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 1,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(1869), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 5,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 6,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(1888), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 1,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(1887), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 6,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 7,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(1903), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 1,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(1902), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 7,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 8,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(1919), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 1,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(1918), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 8,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 9,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(1935), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 1,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(1934), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 9,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 10,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(1951), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 1,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(1950), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 10,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 11,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(1967), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 1,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(1967), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 11,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 12,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(1983), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 1,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(1982), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 12,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 13,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(1998), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 1,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(1997), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 13,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 14,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2013), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 1,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2012), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 14,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 15,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2028), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 1,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2027), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 15,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 16,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2043), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 1,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2042), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 16,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 17,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2061), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 2,
                            ProjectModuleId = 2,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2060), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 1,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 18,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2078), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 2,
                            ProjectModuleId = 2,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2077), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 2,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 19,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2121), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 2,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2120), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 3,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 20,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2139), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 2,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2138), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 4,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 21,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2155), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 2,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2154), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 5,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 22,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2170), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 2,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2169), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 6,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 23,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2185), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 2,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2184), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 7,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 24,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2200), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 2,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2199), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 8,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 25,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2216), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 2,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2215), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 9,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 26,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2231), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 2,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2230), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 10,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 27,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2246), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 2,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2245), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 11,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 28,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2261), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 2,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2260), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 12,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 29,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2276), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 2,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2275), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 13,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 30,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2292), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 2,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2291), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 14,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 31,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2307), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 2,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2306), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 15,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 32,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2322), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 2,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2321), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 16,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 33,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2338), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 2,
                            ProjectModuleId = 3,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2337), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 1,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 34,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2355), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 2,
                            ProjectModuleId = 3,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2354), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 2,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 35,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2370), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 3,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2369), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 3,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 36,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2408), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 3,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2407), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 4,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 37,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2425), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 3,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2424), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 5,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 38,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2440), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 3,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2439), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 6,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 39,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2455), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 3,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2454), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 7,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 40,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2470), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 3,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2469), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 8,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 41,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2486), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 3,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2485), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 9,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 42,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2501), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 3,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2500), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 10,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 43,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2516), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 3,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2515), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 11,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 44,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2531), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 3,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2530), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 12,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 45,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2546), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 3,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2545), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 13,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 46,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2561), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 3,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2560), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 14,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 47,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2576), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 3,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2575), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 15,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 48,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2591), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 3,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2590), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 16,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 49,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2608), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 2,
                            ProjectModuleId = 4,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2607), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 1,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 50,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2623), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 2,
                            ProjectModuleId = 4,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2622), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 2,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 51,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2638), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 3,
                            ProjectModuleId = 4,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2637), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 3,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 52,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2653), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 3,
                            ProjectModuleId = 4,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2652), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 4,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 53,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2667), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 3,
                            ProjectModuleId = 4,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2667), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 5,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 54,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2704), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 3,
                            ProjectModuleId = 4,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2703), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 6,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 55,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2722), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 3,
                            ProjectModuleId = 4,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2721), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 7,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 56,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2737), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 3,
                            ProjectModuleId = 4,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2736), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 8,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 57,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2752), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 3,
                            ProjectModuleId = 4,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2751), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 9,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 58,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2767), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 3,
                            ProjectModuleId = 4,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2766), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 10,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 59,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2782), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 3,
                            ProjectModuleId = 4,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2781), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 11,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 60,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2797), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 3,
                            ProjectModuleId = 4,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2796), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 12,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 61,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2811), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 3,
                            ProjectModuleId = 4,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2810), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 13,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 62,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2826), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 3,
                            ProjectModuleId = 4,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2826), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 14,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 63,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2841), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 3,
                            ProjectModuleId = 4,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2841), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 15,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 64,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2857), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 3,
                            ProjectModuleId = 4,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2856), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 16,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 65,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2872), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 2,
                            ProjectModuleId = 5,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2871), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 1,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 66,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2889), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 2,
                            ProjectModuleId = 5,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2888), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 2,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 67,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2905), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 5,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2904), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 3,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 68,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2920), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 5,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2919), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 4,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 69,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2935), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 5,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2934), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 5,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 70,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2972), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 5,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2971), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 6,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 71,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2990), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 5,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(2989), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 7,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 72,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3006), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 5,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3005), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 8,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 73,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3021), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 5,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3020), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 9,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 74,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3036), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 5,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3035), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 10,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 75,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3051), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 5,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3050), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 11,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 76,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3067), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 5,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3066), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 12,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 77,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3082), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 5,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3081), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 13,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 78,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3097), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 5,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3096), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 14,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 79,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3112), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 5,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3111), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 15,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 80,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3127), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 5,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3126), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 16,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 81,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3159), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 2,
                            ProjectModuleId = 6,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3158), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 1,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 82,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3174), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 2,
                            ProjectModuleId = 6,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3173), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 2,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 83,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3190), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 6,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3189), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 3,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 84,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3206), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 6,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3205), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 4,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 85,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3221), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 6,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3220), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 5,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 86,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3236), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 6,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3235), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 6,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 87,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3251), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 6,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3250), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 7,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 88,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3289), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 2,
                            ProjectModuleId = 6,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3288), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 8,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 89,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3307), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 6,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3306), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 9,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 90,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3323), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 6,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3322), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 10,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 91,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3338), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 6,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3337), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 11,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 92,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3353), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 6,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3352), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 12,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 93,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3369), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 6,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3368), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 13,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 94,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3384), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 6,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3383), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 14,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 95,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3399), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 6,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3398), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 15,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 96,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3414), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 6,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3413), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 16,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 97,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3431), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 2,
                            ProjectModuleId = 7,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3430), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 1,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 98,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3446), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 2,
                            ProjectModuleId = 7,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3445), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 2,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 99,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3461), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 7,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3460), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 3,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 100,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3477), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 7,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3475), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 4,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 101,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3492), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 7,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3491), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 5,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 102,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3507), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 7,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3506), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 6,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 103,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3522), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 7,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3521), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 7,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 104,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3537), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 7,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3536), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 8,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 105,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3552), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 7,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3551), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 9,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 106,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3567), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 2,
                            ProjectModuleId = 7,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3567), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 10,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 107,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3608), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 7,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3607), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 11,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 108,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3623), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 7,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3622), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 12,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 109,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3639), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 7,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3638), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 13,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 110,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3654), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 7,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3653), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 14,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 111,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3670), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 7,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3669), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 15,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 112,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3684), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 7,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3684), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 16,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 113,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3700), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 2,
                            ProjectModuleId = 8,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3699), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 1,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 114,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3715), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 2,
                            ProjectModuleId = 8,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3714), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 2,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 115,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3730), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 8,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3729), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 3,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 116,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3746), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 8,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3745), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 4,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 117,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3761), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 8,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3760), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 5,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 118,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3776), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 8,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3775), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 6,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 119,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3792), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 8,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3791), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 7,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 120,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3807), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 8,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3806), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 8,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 121,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3822), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 8,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3821), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 9,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 122,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3837), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 8,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3836), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 10,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 123,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3852), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 8,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3851), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 11,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 124,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3867), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 8,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3866), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 12,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 125,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3932), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 8,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3931), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 13,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 126,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3949), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 8,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3948), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 14,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 127,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3965), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 8,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3964), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 15,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 128,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3980), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 8,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3979), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 16,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 129,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3996), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 2,
                            ProjectModuleId = 9,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(3995), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 1,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 130,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4013), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 2,
                            ProjectModuleId = 9,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4012), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 2,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 131,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4028), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 9,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4028), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 3,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 132,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4043), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 9,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4043), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 4,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 133,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4059), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 9,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4058), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 5,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 134,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4074), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 9,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4073), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 6,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 135,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4089), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 9,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4088), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 7,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 136,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4105), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 9,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4104), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 8,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 137,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4120), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 9,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4119), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 9,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 138,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4155), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 9,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4155), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 10,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 139,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4173), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 9,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4172), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 11,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 140,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4189), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 9,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4188), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 12,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 141,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4204), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 9,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4203), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 13,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 142,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4219), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 9,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4218), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 14,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 143,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4234), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 9,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4233), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 15,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 144,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4250), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 9,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4249), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 16,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 145,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4266), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 2,
                            ProjectModuleId = 10,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4265), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 1,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 146,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4281), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 2,
                            ProjectModuleId = 10,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4280), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 2,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 147,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4296), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 10,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4296), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 3,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 148,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4312), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 10,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4311), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 4,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 149,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4327), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 10,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4326), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 5,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 150,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4342), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 10,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4341), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 6,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 151,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4357), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 10,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4356), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 7,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 152,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4372), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 10,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4371), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 8,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 153,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4387), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 10,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4387), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 9,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 154,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4403), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 10,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4402), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 10,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 155,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4418), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 10,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4417), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 11,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 156,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4433), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 10,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4432), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 12,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 157,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4473), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 10,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4471), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 13,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 158,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4488), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 10,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4487), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 14,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 159,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4504), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 10,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4503), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 15,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 160,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4519), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 10,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4518), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 16,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 161,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4535), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 2,
                            ProjectModuleId = 11,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4534), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 1,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 162,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4550), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 2,
                            ProjectModuleId = 11,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4549), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 2,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 163,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4565), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 11,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4564), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 3,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 164,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4580), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 11,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4580), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 4,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 165,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4596), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 11,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4595), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 5,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 166,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4611), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 11,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4610), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 6,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 167,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4626), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 11,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4625), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 7,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 168,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4641), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 11,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4640), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 8,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 169,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4656), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 11,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4655), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 9,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 170,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4671), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 11,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4670), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 10,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 171,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4686), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 11,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4685), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 11,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 172,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4701), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 11,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4700), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 12,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 173,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4716), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 11,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4715), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 13,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 174,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4731), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 11,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4730), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 14,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 175,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4768), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 11,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4767), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 15,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 176,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4786), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 11,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4785), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 16,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 177,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4802), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 2,
                            ProjectModuleId = 12,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4801), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 1,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 178,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4817), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 2,
                            ProjectModuleId = 12,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4816), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 2,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 179,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4832), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 12,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4831), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 3,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 180,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4847), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 2,
                            ProjectModuleId = 12,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4847), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 4,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 181,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4862), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 12,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4862), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 5,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 182,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4878), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 12,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4877), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 6,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 183,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4893), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 12,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4892), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 7,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 184,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4908), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 12,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4907), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 8,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 185,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4923), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 12,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4922), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 9,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 186,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4939), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 12,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4938), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 10,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 187,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4954), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 12,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4953), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 11,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 188,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4969), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 12,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4968), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 12,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 189,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4984), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 12,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(4983), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 13,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 190,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(5265), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 12,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(5263), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 14,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 191,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(5294), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 12,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(5293), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 15,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 192,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(5310), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 12,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(5310), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 16,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 193,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(5353), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 2,
                            ProjectModuleId = 13,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(5351), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 1,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 194,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(5370), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 2,
                            ProjectModuleId = 13,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(5369), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 2,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 195,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(5386), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 13,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(5385), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 3,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 196,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(5401), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 2,
                            ProjectModuleId = 13,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(5400), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 4,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 197,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(5417), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 13,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(5416), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 5,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 198,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(5433), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 13,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(5432), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 6,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 199,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(5448), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 13,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(5447), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 7,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 200,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(5464), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 13,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(5463), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 8,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 201,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(5479), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 13,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(5478), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 9,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 202,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(5494), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 13,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(5494), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 10,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 203,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(5510), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 13,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(5509), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 11,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 204,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(5525), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 13,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(5524), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 12,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 205,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(5541), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 13,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(5540), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 13,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 206,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(5778), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 13,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(5777), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 14,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 207,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(5801), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 13,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(5800), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 15,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 208,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(5817), new TimeSpan(0, 0, 0, 0, 0)),
                            PermissionType = 1,
                            ProjectModuleId = 13,
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 599, DateTimeKind.Unspecified).AddTicks(5816), new TimeSpan(0, 0, 0, 0, 0)),
                            RoleId = 16,
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        });
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.PermitsSalesConstraint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityAlwaysColumn();

                    b.Property<int>("BuildingPermits")
                        .HasColumnType("integer")
                        .HasColumnName("building_permits");

                    b.Property<bool>("ElevationFoundationStatus")
                        .HasColumnType("boolean")
                        .HasColumnName("elevation_foundation_status");

                    b.Property<DateTimeOffset?>("LastModifiedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_date_time");

                    b.Property<decimal?>("MaxElevationFoundationMtrs")
                        .HasColumnType("numeric")
                        .HasColumnName("max_elevation_foundation_mtrs");

                    b.Property<decimal>("MaxGroundClearanceMtrs")
                        .HasColumnType("numeric")
                        .HasColumnName("max_ground_clearance_mtrs");

                    b.Property<int>("MaxGroundClearanceStatus")
                        .HasColumnType("integer")
                        .HasColumnName("max_ground_clearance_status");

                    b.Property<decimal>("MaxHubHeightMtrs")
                        .HasColumnType("numeric")
                        .HasColumnName("max_hub_height_mtrs");

                    b.Property<int>("MaxHubHeightStatus")
                        .HasColumnType("integer")
                        .HasColumnName("max_hub_height_status");

                    b.Property<decimal>("MaxTipHeightMtrs")
                        .HasColumnType("numeric")
                        .HasColumnName("max_tip_height_mtrs");

                    b.Property<int>("MaxTipHeightStatus")
                        .HasColumnType("integer")
                        .HasColumnName("max_tip_height_status");

                    b.Property<int>("ProjectConstraintId")
                        .HasColumnType("integer")
                        .HasColumnName("project_constraint_id");

                    b.Property<DateTimeOffset?>("RecordInsertDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("record_insert_date_time");

                    b.HasKey("Id")
                        .HasName("pk_permits_sales_constraints");

                    b.HasIndex("ProjectConstraintId")
                        .IsUnique()
                        .HasDatabaseName("ix_permits_sales_constraints_project_constraint_id");

                    b.ToTable("permits_sales_constraints");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityAlwaysColumn();

                    b.Property<string>("ActiveRecordIndicator")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("active_record_indicator");

                    b.Property<string>("ContractStatus")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("contract_status");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer")
                        .HasColumnName("country_id");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("created_by");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("customer_name");

                    b.Property<DateTimeOffset?>("LastModifiedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_date_time");

                    b.Property<string>("OpportunityId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("opportunity_id");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("project_name");

                    b.Property<DateTimeOffset?>("RecordEndDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("record_end_date_time");

                    b.Property<DateTimeOffset?>("RecordInsertDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("record_insert_date_time");

                    b.Property<string>("SSTRequestSimilarProjects")
                        .HasColumnType("text")
                        .HasColumnName("sst_request_similar_projects");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_projects");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("ix_projects_country_id");

                    b.HasIndex("OpportunityId")
                        .IsUnique()
                        .HasDatabaseName("ix_projects_opportunity_id");

                    b.HasIndex("ProjectName")
                        .IsUnique()
                        .HasDatabaseName("ix_projects_project_name");

                    b.ToTable("projects");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.ProjectConstraint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTimeOffset?>("LastModifiedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_date_time");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer")
                        .HasColumnName("project_id");

                    b.Property<DateTimeOffset?>("RecordInsertDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("record_insert_date_time");

                    b.HasKey("Id")
                        .HasName("pk_project_constraints");

                    b.HasIndex("ProjectId")
                        .IsUnique()
                        .HasDatabaseName("ix_project_constraints_project_id");

                    b.HasIndex("Id", "ProjectId")
                        .IsUnique()
                        .HasDatabaseName("ix_project_constraints_id_project_id");

                    b.ToTable("project_constraints");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.ProjectMileStones", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<DateTime>("MileStoneDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("mile_stone_date");

                    b.Property<int>("MileStoneId")
                        .HasColumnType("integer")
                        .HasColumnName("mile_stone_id");

                    b.Property<string>("MileStoneOfferStatus")
                        .HasColumnType("text")
                        .HasColumnName("mile_stone_offer_status");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer")
                        .HasColumnName("project_id");

                    b.HasKey("Id")
                        .HasName("pk_project_mile_stones");

                    b.HasIndex("MileStoneId")
                        .HasDatabaseName("ix_project_mile_stones_mile_stone_id");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_project_mile_stones_project_id");

                    b.ToTable("project_mile_stones");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.ProjectModule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityAlwaysColumn();

                    b.Property<DateTimeOffset?>("LastModifiedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_date_time");

                    b.Property<string>("ModuleName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("module_name");

                    b.Property<DateTimeOffset?>("RecordInsertDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("record_insert_date_time");

                    b.HasKey("Id")
                        .HasName("pk_project_modules");

                    b.ToTable("project_modules");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 597, DateTimeKind.Unspecified).AddTicks(1024), new TimeSpan(0, 0, 0, 0, 0)),
                            ModuleName = "Create new opportunity",
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 597, DateTimeKind.Unspecified).AddTicks(547), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 2,
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 597, DateTimeKind.Unspecified).AddTicks(1509), new TimeSpan(0, 0, 0, 0, 0)),
                            ModuleName = "Opporutinty information",
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 597, DateTimeKind.Unspecified).AddTicks(1503), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 3,
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 597, DateTimeKind.Unspecified).AddTicks(1512), new TimeSpan(0, 0, 0, 0, 0)),
                            ModuleName = "Opportunity key milestones",
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 597, DateTimeKind.Unspecified).AddTicks(1511), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 4,
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 597, DateTimeKind.Unspecified).AddTicks(1514), new TimeSpan(0, 0, 0, 0, 0)),
                            ModuleName = "Roles & Responsiblities",
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 597, DateTimeKind.Unspecified).AddTicks(1514), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 5,
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 597, DateTimeKind.Unspecified).AddTicks(1517), new TimeSpan(0, 0, 0, 0, 0)),
                            ModuleName = "Project Constraints",
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 597, DateTimeKind.Unspecified).AddTicks(1516), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 6,
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 597, DateTimeKind.Unspecified).AddTicks(1521), new TimeSpan(0, 0, 0, 0, 0)),
                            ModuleName = "Logistics constraints",
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 597, DateTimeKind.Unspecified).AddTicks(1521), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 7,
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 597, DateTimeKind.Unspecified).AddTicks(1524), new TimeSpan(0, 0, 0, 0, 0)),
                            ModuleName = "Construction constraints",
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 597, DateTimeKind.Unspecified).AddTicks(1523), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 8,
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 597, DateTimeKind.Unspecified).AddTicks(1526), new TimeSpan(0, 0, 0, 0, 0)),
                            ModuleName = "Scope & Responsibility",
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 597, DateTimeKind.Unspecified).AddTicks(1525), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 9,
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 597, DateTimeKind.Unspecified).AddTicks(1528), new TimeSpan(0, 0, 0, 0, 0)),
                            ModuleName = "Certification",
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 597, DateTimeKind.Unspecified).AddTicks(1527), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 10,
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 597, DateTimeKind.Unspecified).AddTicks(1531), new TimeSpan(0, 0, 0, 0, 0)),
                            ModuleName = "Quote",
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 597, DateTimeKind.Unspecified).AddTicks(1530), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 11,
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 597, DateTimeKind.Unspecified).AddTicks(1533), new TimeSpan(0, 0, 0, 0, 0)),
                            ModuleName = "Add turbine type",
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 597, DateTimeKind.Unspecified).AddTicks(1532), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 12,
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 597, DateTimeKind.Unspecified).AddTicks(1535), new TimeSpan(0, 0, 0, 0, 0)),
                            ModuleName = "Add baseline scenario",
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 597, DateTimeKind.Unspecified).AddTicks(1534), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            Id = 13,
                            LastModifiedDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 597, DateTimeKind.Unspecified).AddTicks(1537), new TimeSpan(0, 0, 0, 0, 0)),
                            ModuleName = "Add SST scenario",
                            RecordInsertDateTime = new DateTimeOffset(new DateTime(2021, 1, 12, 6, 8, 55, 597, DateTimeKind.Unspecified).AddTicks(1537), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.ProjectRoles", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer")
                        .HasColumnName("project_id");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer")
                        .HasColumnName("role_id");

                    b.Property<string>("userId")
                        .HasColumnType("text")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_project_roles");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_project_roles_project_id");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_project_roles_role_id");

                    b.ToTable("project_roles");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.Proposal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityAlwaysColumn();

                    b.Property<string>("ActiveRecordIndicator")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("active_record_indicator");

                    b.Property<DateTime?>("CertificationDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("certification_date");

                    b.Property<int>("CertificationId")
                        .HasColumnType("integer")
                        .HasColumnName("certification_id");

                    b.Property<bool>("IsMain")
                        .HasColumnType("boolean")
                        .HasColumnName("is_main");

                    b.Property<DateTimeOffset?>("LastModifiedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_date_time");

                    b.Property<int>("ProjectId")
                        .HasColumnType("integer")
                        .HasColumnName("project_id");

                    b.Property<string>("ProposalId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("proposal_id");

                    b.Property<DateTime?>("RecordEndDateTime")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("record_end_date_time");

                    b.Property<DateTimeOffset?>("RecordInsertDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("record_insert_date_time");

                    b.HasKey("Id")
                        .HasName("pk_proposals");

                    b.HasIndex("CertificationId")
                        .HasDatabaseName("ix_proposals_certification_id");

                    b.HasIndex("ProjectId")
                        .HasDatabaseName("ix_proposals_project_id");

                    b.HasIndex("ProposalId")
                        .IsUnique()
                        .HasDatabaseName("ix_proposals_proposal_id");

                    b.ToTable("proposals");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.ProposalTasks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<bool>("IsCustomer")
                        .HasColumnType("boolean")
                        .HasColumnName("is_customer");

                    b.Property<int>("ProposalId")
                        .HasColumnType("integer")
                        .HasColumnName("proposal_id");

                    b.Property<int>("TaskId")
                        .HasColumnType("integer")
                        .HasColumnName("task_id");

                    b.HasKey("Id")
                        .HasName("pk_proposal_tasks");

                    b.HasIndex("ProposalId")
                        .HasDatabaseName("ix_proposal_tasks_proposal_id");

                    b.HasIndex("TaskId")
                        .HasDatabaseName("ix_proposal_tasks_task_id");

                    b.ToTable("proposal_tasks");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.Quote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityAlwaysColumn();

                    b.Property<DateTimeOffset?>("LastModifiedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_date_time");

                    b.Property<string>("OfferStatus")
                        .HasColumnType("text")
                        .HasColumnName("offer_status");

                    b.Property<bool>("OfferType")
                        .HasColumnType("boolean")
                        .HasColumnName("offer_type");

                    b.Property<int>("ProposalId")
                        .HasColumnType("integer")
                        .HasColumnName("proposal_id");

                    b.Property<string>("QuotationId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("quotation_id");

                    b.Property<string>("QuotationName")
                        .HasColumnType("text")
                        .HasColumnName("quotation_name");

                    b.Property<bool>("QuotationStatus")
                        .HasColumnType("boolean")
                        .HasColumnName("quotation_status");

                    b.Property<DateTime?>("QuoteSubmissionDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("quote_submission_date");

                    b.Property<DateTimeOffset?>("RecordInsertDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("record_insert_date_time");

                    b.Property<string>("SarCode")
                        .HasColumnType("text")
                        .HasColumnName("sar_code");

                    b.HasKey("Id")
                        .HasName("pk_quotes");

                    b.HasIndex("ProposalId")
                        .HasDatabaseName("ix_quotes_proposal_id");

                    b.HasIndex("QuotationId")
                        .IsUnique()
                        .HasDatabaseName("ix_quotes_quotation_id");

                    b.ToTable("quotes");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityAlwaysColumn();

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("region_name");

                    b.HasKey("Id")
                        .HasName("pk_regions");

                    b.ToTable("regions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            RegionName = "APAC"
                        },
                        new
                        {
                            Id = 2,
                            RegionName = "BRAZIL"
                        },
                        new
                        {
                            Id = 3,
                            RegionName = "INDIA"
                        },
                        new
                        {
                            Id = 4,
                            RegionName = "LATAM"
                        },
                        new
                        {
                            Id = 5,
                            RegionName = "NE&ME"
                        },
                        new
                        {
                            Id = 6,
                            RegionName = "NORTH AMERICA"
                        },
                        new
                        {
                            Id = 7,
                            RegionName = "SE&A"
                        });
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityAlwaysColumn();

                    b.Property<string>("ActiveRecordIndicator")
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("active_record_indicator");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("created_by");

                    b.Property<DateTimeOffset?>("LastModifiedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_date_time");

                    b.Property<DateTimeOffset?>("RecordInsertDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("record_insert_date_time");

                    b.Property<string>("RoleDescription")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("role_description");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("role_name");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.ToTable("roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            RoleName = "Opportunity Owner / Sales Manger",
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            RoleName = "Proposal Manager",
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            RoleName = "Siting Engineer",
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            RoleName = "Technical Project Manager",
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 5,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            RoleName = "Global Project Engineering",
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 6,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            RoleName = "Planning Towers",
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 7,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            RoleName = "Procurement Manager",
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 8,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            RoleName = "Logistic Pre-Sales Road Engineer",
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 9,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            RoleName = "PR Pre-Sales (Logistic)",
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 10,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            RoleName = "PR Pre-Sales (Construction)",
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 11,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            RoleName = "Construction Technical Office",
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 12,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            RoleName = "Tower Development Structure",
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 13,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            RoleName = "Tower Development Internals / Drawings / BOM",
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 14,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            RoleName = "Customs Tower",
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 15,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            RoleName = "Certification Tower Component Certificate",
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        },
                        new
                        {
                            Id = 16,
                            CreatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com",
                            RoleName = "Certification SSA",
                            UpdatedBy = "visweswara.dontamsetti.ext@siemensgamesa.com"
                        });
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.SarStudy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityByDefaultColumn();

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime>("LastUpdateDTM")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("last_update_dtm");

                    b.Property<DateTime>("RecordInsertDTM")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("record_insert_dtm");

                    b.HasKey("Id")
                        .HasName("pk_sar_studies");

                    b.ToTable("sar_studies");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.Scenario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityAlwaysColumn();

                    b.Property<DateTimeOffset?>("LastModifiedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_date_time");

                    b.Property<string>("LoadCluster")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("character varying(1)")
                        .HasColumnName("load_cluster");

                    b.Property<int>("Options")
                        .HasColumnType("integer")
                        .HasColumnName("options");

                    b.Property<int>("Progress")
                        .HasColumnType("integer")
                        .HasColumnName("progress");

                    b.Property<DateTimeOffset?>("RecordInsertDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("record_insert_date_time");

                    b.Property<int>("ScenarioNo")
                        .HasColumnType("integer")
                        .HasColumnName("scenario_no");

                    b.Property<int>("ScenarioType")
                        .HasColumnType("integer")
                        .HasColumnName("scenario_type");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("WtgConfigurationId")
                        .HasColumnType("integer")
                        .HasColumnName("wtg_configuration_id");

                    b.HasKey("Id")
                        .HasName("pk_scenarios");

                    b.HasIndex("ScenarioNo")
                        .IsUnique()
                        .HasDatabaseName("ix_scenarios_scenario_no");

                    b.HasIndex("WtgConfigurationId")
                        .HasDatabaseName("ix_scenarios_wtg_configuration_id");

                    b.HasIndex("Id", "WtgConfigurationId")
                        .HasDatabaseName("ix_scenarios_id_wtg_configuration_id");

                    b.ToTable("scenarios");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.ScenarioCostsKpi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityAlwaysColumn();

                    b.Property<decimal>("AepP50Delta")
                        .HasColumnType("numeric")
                        .HasColumnName("aep_p50delta");

                    b.Property<decimal>("AepP50Gross")
                        .HasColumnType("numeric")
                        .HasColumnName("aep_p50gross");

                    b.Property<decimal>("AepP50Net")
                        .HasColumnType("numeric")
                        .HasColumnName("aep_p50net");

                    b.Property<decimal>("CapexDelta")
                        .HasColumnType("numeric")
                        .HasColumnName("capex_delta");

                    b.Property<decimal>("Coe")
                        .HasColumnType("numeric")
                        .HasColumnName("coe");

                    b.Property<decimal>("CoeDelta")
                        .HasColumnType("numeric")
                        .HasColumnName("coe_delta");

                    b.Property<string>("Risks")
                        .HasColumnType("text")
                        .HasColumnName("risks");

                    b.Property<int>("ScenarioId")
                        .HasColumnType("integer")
                        .HasColumnName("scenario_id");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("numeric")
                        .HasColumnName("total_cost");

                    b.Property<decimal>("TotalTowerExwCost")
                        .HasColumnType("numeric")
                        .HasColumnName("total_tower_exw_cost");

                    b.HasKey("Id")
                        .HasName("pk_scenario_costs_kpis");

                    b.HasIndex("ScenarioId")
                        .HasDatabaseName("ix_scenario_costs_kpis_scenario_id");

                    b.ToTable("scenario_costs_kpis");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.ScenarioDesign", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityAlwaysColumn();

                    b.Property<decimal>("HubHeight")
                        .HasColumnType("numeric")
                        .HasColumnName("hub_height");

                    b.Property<int>("Lifetime")
                        .HasColumnType("integer")
                        .HasColumnName("lifetime");

                    b.Property<string>("Risks")
                        .HasColumnType("text")
                        .HasColumnName("risks");

                    b.Property<int>("ScenarioId")
                        .HasColumnType("integer")
                        .HasColumnName("scenario_id");

                    b.Property<bool>("StepProgress")
                        .HasColumnType("boolean")
                        .HasColumnName("step_progress");

                    b.Property<decimal>("TowerWeight")
                        .HasColumnType("numeric")
                        .HasColumnName("tower_weight");

                    b.HasKey("Id")
                        .HasName("pk_scenario_designs");

                    b.HasIndex("ScenarioId")
                        .HasDatabaseName("ix_scenario_designs_scenario_id");

                    b.ToTable("scenario_designs");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.SpecialRequirementsSalesConstraint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityAlwaysColumn();

                    b.Property<string>("AdditionalRequirements")
                        .HasColumnType("text")
                        .HasColumnName("additional_requirements");

                    b.Property<string[]>("ExtremeWindConditions")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("extreme_wind_conditions");

                    b.Property<string>("ExtremeWindConditionsOtherDescription")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("extreme_wind_conditions_other_description");

                    b.Property<DateTimeOffset?>("LastModifiedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_date_time");

                    b.Property<bool>("Nearshore")
                        .HasColumnType("boolean")
                        .HasColumnName("nearshore");

                    b.Property<string[]>("ProjReqLimitSupplierSelection")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("proj_req_limit_supplier_selection");

                    b.Property<int>("ProjectConstraintId")
                        .HasColumnType("integer")
                        .HasColumnName("project_constraint_id");

                    b.Property<DateTimeOffset?>("RecordInsertDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("record_insert_date_time");

                    b.Property<bool>("SesimicRequirements")
                        .HasColumnType("boolean")
                        .HasColumnName("sesimic_requirements");

                    b.Property<string>("SesimicRequirementsCountryCode")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("sesimic_requirements_country_code");

                    b.Property<string>("SupplierRequirements")
                        .HasColumnType("text")
                        .HasColumnName("supplier_requirements");

                    b.HasKey("Id")
                        .HasName("pk_special_requirements_sales_constraints");

                    b.HasIndex("ProjectConstraintId")
                        .IsUnique()
                        .HasDatabaseName("ix_special_requirements_sales_constraints_project_constraint_id");

                    b.ToTable("special_requirements_sales_constraints");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.SwatLoad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityAlwaysColumn();

                    b.Property<bool>("Acs2xEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("acs2x_enabled");

                    b.Property<decimal[]>("AepGrossInGhw")
                        .IsRequired()
                        .HasColumnType("numeric[]")
                        .HasColumnName("aep_gross_in_ghw");

                    b.Property<decimal[]>("AepGrossInPercent")
                        .IsRequired()
                        .HasColumnType("numeric[]")
                        .HasColumnName("aep_gross_in_percent");

                    b.Property<decimal[]>("AepNetInGhw")
                        .HasColumnType("numeric[]")
                        .HasColumnName("aep_net_in_ghw");

                    b.Property<decimal[]>("AepNetInPercent")
                        .HasColumnType("numeric[]")
                        .HasColumnName("aep_net_in_percent");

                    b.Property<decimal[]>("AepStepsInM")
                        .IsRequired()
                        .HasColumnType("numeric[]")
                        .HasColumnName("aep_steps_in_m");

                    b.Property<int[]>("ApplicationModes")
                        .IsRequired()
                        .HasColumnType("integer[]")
                        .HasColumnName("application_modes");

                    b.Property<string>("CloeTowerId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("cloe_tower_id");

                    b.Property<string>("ConfigurationId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("configuration_id");

                    b.Property<string>("ElsaFileName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("elsa_file_name");

                    b.Property<decimal>("ElsaFilesize")
                        .HasColumnType("numeric")
                        .HasColumnName("elsa_filesize");

                    b.Property<string[]>("JsonPayload")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("json_payload");

                    b.Property<DateTimeOffset?>("LastModifiedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_date_time");

                    b.Property<string>("LinkToElsaFile")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("link_to_elsa_file");

                    b.Property<string>("LinkToSafalFile")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("link_to_safal_file");

                    b.Property<string>("LoadClusterId")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("load_cluster_id");

                    b.Property<DateTimeOffset?>("RecordInsertDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("record_insert_date_time");

                    b.Property<decimal>("RnaLifetime")
                        .HasColumnType("numeric")
                        .HasColumnName("rna_lifetime");

                    b.Property<decimal>("RnaLoadsMargin")
                        .HasColumnType("numeric")
                        .HasColumnName("rna_loads_margin");

                    b.Property<string>("RnaSuitability")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("rna_suitability");

                    b.Property<string>("SafalFileName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("safal_file_name");

                    b.Property<decimal>("SafalFilesize")
                        .HasColumnType("numeric")
                        .HasColumnName("safal_filesize");

                    b.Property<string>("SarCode")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("sar_code");

                    b.Property<decimal>("SiteLatitude")
                        .HasColumnType("numeric")
                        .HasColumnName("site_latitude");

                    b.Property<decimal>("SiteLongitude")
                        .HasColumnType("numeric")
                        .HasColumnName("site_longitude");

                    b.Property<decimal>("TowerHubHeightStandardScenario")
                        .HasColumnType("numeric")
                        .HasColumnName("tower_hub_height_standard_scenario");

                    b.Property<decimal>("TowerLoadsMargin")
                        .HasColumnType("numeric")
                        .HasColumnName("tower_loads_margin");

                    b.Property<string>("TowerTypeSwat")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("tower_type_swat");

                    b.Property<int>("TurbineQuantity")
                        .HasColumnType("integer")
                        .HasColumnName("turbine_quantity");

                    b.Property<string>("TurbineType")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("turbine_type");

                    b.Property<decimal>("WindShear")
                        .HasColumnType("numeric")
                        .HasColumnName("wind_shear");

                    b.HasKey("Id")
                        .HasName("pk_swat_loads");

                    b.ToTable("swat_loads");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.Task", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityAlwaysColumn();

                    b.Property<DateTimeOffset?>("LastModifiedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_date_time");

                    b.Property<DateTimeOffset?>("RecordInsertDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("record_insert_date_time");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("task_name");

                    b.HasKey("Id")
                        .HasName("pk_tasks");

                    b.ToTable("tasks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TaskName = "Tower design"
                        },
                        new
                        {
                            Id = 2,
                            TaskName = "Foundation design"
                        },
                        new
                        {
                            Id = 3,
                            TaskName = "Anchor Cage design"
                        },
                        new
                        {
                            Id = 4,
                            TaskName = "Preliminary Logistic Assessment"
                        },
                        new
                        {
                            Id = 5,
                            TaskName = "Road Survey"
                        },
                        new
                        {
                            Id = 6,
                            TaskName = "Transport oversea"
                        },
                        new
                        {
                            Id = 7,
                            TaskName = "Transport inland"
                        },
                        new
                        {
                            Id = 8,
                            TaskName = "Anchor cage delivery"
                        },
                        new
                        {
                            Id = 9,
                            TaskName = "Foundation construction"
                        },
                        new
                        {
                            Id = 10,
                            TaskName = "Tower installation"
                        });
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.TowersiteBevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityAlwaysColumn();

                    b.Property<decimal?>("B1De")
                        .HasColumnType("numeric")
                        .HasColumnName("b1_de");

                    b.Property<string>("B1Detail")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("b1_detail");

                    b.Property<decimal?>("B1Di")
                        .HasColumnType("numeric")
                        .HasColumnName("b1_di");

                    b.Property<decimal?>("B1a")
                        .HasColumnType("numeric")
                        .HasColumnName("b1_a");

                    b.Property<decimal?>("B1r")
                        .HasColumnType("numeric")
                        .HasColumnName("b1_r");

                    b.Property<decimal?>("B2De")
                        .HasColumnType("numeric")
                        .HasColumnName("b2_de");

                    b.Property<string>("B2Detail")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("b2_detail");

                    b.Property<decimal?>("B2Di")
                        .HasColumnType("numeric")
                        .HasColumnName("b2_di");

                    b.Property<decimal?>("B2a")
                        .HasColumnType("numeric")
                        .HasColumnName("b2_a");

                    b.Property<decimal?>("B2r")
                        .HasColumnType("numeric")
                        .HasColumnName("b2_r");

                    b.Property<decimal?>("B3De")
                        .HasColumnType("numeric")
                        .HasColumnName("b3_de");

                    b.Property<string>("B3Detail")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("b3_detail");

                    b.Property<decimal?>("B3Di")
                        .HasColumnType("numeric")
                        .HasColumnName("b3_di");

                    b.Property<decimal?>("B3a")
                        .HasColumnType("numeric")
                        .HasColumnName("b3_a");

                    b.Property<decimal?>("B3r")
                        .HasColumnType("numeric")
                        .HasColumnName("b3_r");

                    b.Property<DateTimeOffset?>("LastModifiedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_date_time");

                    b.Property<string>("Mat")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("mat");

                    b.Property<string>("Pos")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("pos");

                    b.Property<DateTimeOffset?>("RecordInsertDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("record_insert_date_time");

                    b.Property<int>("SectionNr")
                        .HasColumnType("integer")
                        .HasColumnName("section_nr");

                    b.Property<string>("SectionType")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("section_type");

                    b.Property<Guid>("SstUuid")
                        .HasColumnType("uuid")
                        .HasColumnName("sst_uuid");

                    b.Property<decimal?>("T")
                        .HasColumnType("numeric")
                        .HasColumnName("t");

                    b.HasKey("Id")
                        .HasName("pk_towersite_bevel");

                    b.ToTable("towersite_bevel");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.TowersiteFlange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityAlwaysColumn();

                    b.Property<decimal?>("Db")
                        .HasColumnType("numeric")
                        .HasColumnName("db_mm");

                    b.Property<decimal?>("Dbco")
                        .HasColumnType("numeric")
                        .HasColumnName("dbco_mm");

                    b.Property<decimal?>("Dbei")
                        .HasColumnType("numeric")
                        .HasColumnName("dbei_mm");

                    b.Property<decimal?>("Dbeo")
                        .HasColumnType("numeric")
                        .HasColumnName("dbeo_mm");

                    b.Property<decimal?>("Dcb")
                        .HasColumnType("numeric")
                        .HasColumnName("dcb_mm");

                    b.Property<decimal?>("Dfo")
                        .HasColumnType("numeric")
                        .HasColumnName("dfo_mm");

                    b.Property<decimal?>("Dh")
                        .HasColumnType("numeric")
                        .HasColumnName("dh_mm");

                    b.Property<decimal?>("Dso")
                        .HasColumnType("numeric")
                        .HasColumnName("dso_mm");

                    b.Property<decimal?>("FbPtNom")
                        .HasColumnType("numeric")
                        .HasColumnName("fb_pt_nom_kn");

                    b.Property<int>("FlangeNr")
                        .HasColumnType("integer")
                        .HasColumnName("flange_nr");

                    b.Property<decimal?>("FlangeType")
                        .HasColumnType("numeric")
                        .HasColumnName("flange_type");

                    b.Property<DateTimeOffset?>("LastModifiedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_date_time");

                    b.Property<decimal?>("Lb")
                        .HasColumnType("numeric")
                        .HasColumnName("lb_mm");

                    b.Property<decimal?>("Lbe")
                        .HasColumnType("numeric")
                        .HasColumnName("lbe_mm");

                    b.Property<decimal?>("Mass")
                        .HasColumnType("numeric")
                        .HasColumnName("mass_kg");

                    b.Property<decimal?>("Nb")
                        .HasColumnType("numeric")
                        .HasColumnName("nb");

                    b.Property<decimal?>("Nh")
                        .HasColumnType("numeric")
                        .HasColumnName("nh_mm");

                    b.Property<decimal?>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<decimal?>("PriceCurrency")
                        .HasColumnType("numeric")
                        .HasColumnName("price_currency");

                    b.Property<decimal?>("Rc")
                        .HasColumnType("numeric")
                        .HasColumnName("rc_mm");

                    b.Property<DateTimeOffset?>("RecordInsertDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("record_insert_date_time");

                    b.Property<Guid>("SstUuid")
                        .HasColumnType("uuid")
                        .HasColumnName("sst_uuid");

                    b.Property<decimal?>("Tbp")
                        .HasColumnType("numeric")
                        .HasColumnName("tbp_mm");

                    b.Property<decimal?>("Tf")
                        .HasColumnType("numeric")
                        .HasColumnName("tf_mm");

                    b.Property<decimal?>("TfType")
                        .HasColumnType("numeric")
                        .HasColumnName("tf_type");

                    b.Property<decimal?>("Tfa")
                        .HasColumnType("numeric")
                        .HasColumnName("tfa_mm");

                    b.Property<decimal?>("Totalmass")
                        .HasColumnType("numeric")
                        .HasColumnName("totalmass_kg");

                    b.Property<decimal?>("TsLower")
                        .HasColumnType("numeric")
                        .HasColumnName("ts_lower_mm");

                    b.Property<decimal?>("TsUpper")
                        .HasColumnType("numeric")
                        .HasColumnName("ts_upper_mm");

                    b.Property<decimal?>("Wbp")
                        .HasColumnType("numeric")
                        .HasColumnName("wbp_mm");

                    b.Property<decimal?>("Wf")
                        .HasColumnType("numeric")
                        .HasColumnName("wf_mm");

                    b.Property<decimal?>("Wfa")
                        .HasColumnType("numeric")
                        .HasColumnName("wfa_mm");

                    b.Property<decimal?>("Z")
                        .HasColumnType("numeric")
                        .HasColumnName("z_mm");

                    b.HasKey("Id")
                        .HasName("pk_towersite_flanges");

                    b.ToTable("towersite_flanges");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.TowersiteGeoDoor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityAlwaysColumn();

                    b.Property<decimal?>("DistBottomToLowerDoorFrame")
                        .HasColumnType("numeric")
                        .HasColumnName("dist_bottom_to_lower_door_frame_mm");

                    b.Property<decimal?>("DistBottomToUpperDoorFrame")
                        .HasColumnType("numeric")
                        .HasColumnName("dist_bottom_to_upper_door_frame_mm");

                    b.Property<decimal?>("DistOuterShellToFrameAtTop")
                        .HasColumnType("numeric")
                        .HasColumnName("dist_outer_shell_to_frame_at_top_mm");

                    b.Property<string>("DoorFrameHolesScfFile")
                        .HasColumnType("text")
                        .HasColumnName("door_frame_holes_scf_file");

                    b.Property<decimal?>("DoorThicknessEffectExponent")
                        .HasColumnType("numeric")
                        .HasColumnName("door_thickness_effect_exponent");

                    b.Property<decimal?>("DoorWeldClass")
                        .HasColumnType("numeric")
                        .HasColumnName("door_weld_class");

                    b.Property<DateTimeOffset?>("LastModifiedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_date_time");

                    b.Property<DateTimeOffset?>("RecordInsertDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("record_insert_date_time");

                    b.Property<decimal?>("ScfDoorBottomBending")
                        .HasColumnType("numeric")
                        .HasColumnName("scf_door_bottom_bending");

                    b.Property<decimal?>("ScfDoorTopBending")
                        .HasColumnType("numeric")
                        .HasColumnName("scf_door_top_bending");

                    b.Property<decimal?>("ScfDoorTorsion")
                        .HasColumnType("numeric")
                        .HasColumnName("scf_door_torsion");

                    b.Property<Guid>("SstUuid")
                        .HasColumnType("uuid")
                        .HasColumnName("sst_uuid");

                    b.Property<decimal?>("ThicknessOfDoorFrame")
                        .HasColumnType("numeric")
                        .HasColumnName("thickness_of_door_frame_mm");

                    b.Property<decimal?>("TotalWidthOfDoorWay")
                        .HasColumnType("numeric")
                        .HasColumnName("total_width_of_door_way_mm");

                    b.Property<decimal?>("WidthOfDoorFrame")
                        .HasColumnType("numeric")
                        .HasColumnName("width_of_door_frame_mm");

                    b.HasKey("Id")
                        .HasName("pk_towersite_geo_door");

                    b.ToTable("towersite_geo_door");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.TowersiteGeoMain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityAlwaysColumn();

                    b.Property<decimal?>("Dbot")
                        .HasColumnType("numeric")
                        .HasColumnName("dbot_mm");

                    b.Property<decimal?>("Dtop")
                        .HasColumnType("numeric")
                        .HasColumnName("dtop_mm");

                    b.Property<decimal?>("H")
                        .HasColumnType("numeric")
                        .HasColumnName("h_mm");

                    b.Property<DateTimeOffset?>("LastModifiedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_date_time");

                    b.Property<int?>("Matrid")
                        .HasColumnType("integer")
                        .HasColumnName("matrid");

                    b.Property<int?>("ObjectNr")
                        .HasColumnType("integer")
                        .HasColumnName("object_nr");

                    b.Property<string>("ObjectType")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("object_type");

                    b.Property<DateTimeOffset?>("RecordInsertDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("record_insert_date_time");

                    b.Property<decimal?>("SCFtop")
                        .HasColumnType("numeric")
                        .HasColumnName("sc_ftop");

                    b.Property<int?>("SectionPartNr")
                        .HasColumnType("integer")
                        .HasColumnName("section_part_nr");

                    b.Property<Guid>("SstUuid")
                        .HasColumnType("uuid")
                        .HasColumnName("sst_uuid");

                    b.Property<decimal?>("T")
                        .HasColumnType("numeric")
                        .HasColumnName("t_mm");

                    b.HasKey("Id")
                        .HasName("pk_towersite_geo_main");

                    b.ToTable("towersite_geo_main");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.TowersiteListRegion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityAlwaysColumn();

                    b.Property<DateTimeOffset?>("LastModifiedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_date_time");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.Property<DateTimeOffset?>("RecordInsertDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("record_insert_date_time");

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("region_name");

                    b.Property<string>("Units")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("units");

                    b.HasKey("Id")
                        .HasName("pk_towersite_list_regions");

                    b.ToTable("towersite_list_regions");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.TowersiteListTower", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityAlwaysColumn();

                    b.Property<decimal?>("DefaulthubheightM")
                        .HasColumnType("numeric")
                        .HasColumnName("defaulthubheight_m");

                    b.Property<decimal?>("DefaultmaxsectiondiameterM")
                        .HasColumnType("numeric")
                        .HasColumnName("defaultmaxsectiondiameter_m");

                    b.Property<decimal?>("DefaultmaxsectionlengthM")
                        .HasColumnType("numeric")
                        .HasColumnName("defaultmaxsectionlength_m");

                    b.Property<int?>("Defaultmaxsectionnumber")
                        .HasColumnType("integer")
                        .HasColumnName("defaultmaxsectionnumber");

                    b.Property<decimal?>("DefaultmaxsectionweightKg")
                        .HasColumnType("numeric")
                        .HasColumnName("defaultmaxsectionweight_kg");

                    b.Property<string>("Description")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("description");

                    b.Property<string>("Gpcode")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("gpcode");

                    b.Property<decimal?>("HubheightM")
                        .HasColumnType("numeric")
                        .HasColumnName("hubheight_m");

                    b.Property<decimal?>("HubheightmaxM")
                        .HasColumnType("numeric")
                        .HasColumnName("hubheightmax_m");

                    b.Property<decimal?>("HubheightminM")
                        .HasColumnType("numeric")
                        .HasColumnName("hubheightmin_m");

                    b.Property<DateTimeOffset?>("LastModifiedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_date_time");

                    b.Property<string>("Platform")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("platform");

                    b.Property<DateTimeOffset?>("RecordInsertDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("record_insert_date_time");

                    b.Property<string>("Technology")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("technology");

                    b.Property<decimal?>("TotaltowerweightKg")
                        .HasColumnType("numeric")
                        .HasColumnName("totaltowerweight_kg");

                    b.Property<string>("Tower")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("tower");

                    b.Property<string>("Wtgmachine")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("wtgmachine");

                    b.HasKey("Id")
                        .HasName("pk_towersite_list_towers");

                    b.ToTable("towersite_list_towers");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.TowersitePlate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityAlwaysColumn();

                    b.Property<decimal?>("A")
                        .HasColumnType("numeric")
                        .HasColumnName("a");

                    b.Property<decimal?>("B")
                        .HasColumnType("numeric")
                        .HasColumnName("b");

                    b.Property<decimal?>("C")
                        .HasColumnType("numeric")
                        .HasColumnName("c");

                    b.Property<decimal?>("D")
                        .HasColumnType("numeric")
                        .HasColumnName("d");

                    b.Property<decimal?>("E")
                        .HasColumnType("numeric")
                        .HasColumnName("e");

                    b.Property<decimal?>("F")
                        .HasColumnType("numeric")
                        .HasColumnName("f");

                    b.Property<decimal?>("G")
                        .HasColumnType("numeric")
                        .HasColumnName("g");

                    b.Property<decimal?>("Gwght")
                        .HasColumnType("numeric")
                        .HasColumnName("gwght");

                    b.Property<decimal?>("H")
                        .HasColumnType("numeric")
                        .HasColumnName("h");

                    b.Property<decimal?>("I")
                        .HasColumnType("numeric")
                        .HasColumnName("i");

                    b.Property<decimal?>("J")
                        .HasColumnType("numeric")
                        .HasColumnName("j");

                    b.Property<decimal?>("K")
                        .HasColumnType("numeric")
                        .HasColumnName("k");

                    b.Property<decimal?>("L")
                        .HasColumnType("numeric")
                        .HasColumnName("l");

                    b.Property<DateTimeOffset?>("LastModifiedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_date_time");

                    b.Property<decimal?>("M")
                        .HasColumnType("numeric")
                        .HasColumnName("m");

                    b.Property<string>("Mat")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("mat");

                    b.Property<decimal?>("N")
                        .HasColumnType("numeric")
                        .HasColumnName("n");

                    b.Property<decimal?>("Nwght")
                        .HasColumnType("numeric")
                        .HasColumnName("nwght");

                    b.Property<decimal?>("O")
                        .HasColumnType("numeric")
                        .HasColumnName("o");

                    b.Property<string>("Pos")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("pos");

                    b.Property<DateTimeOffset?>("RecordInsertDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("record_insert_date_time");

                    b.Property<int>("SectionNr")
                        .HasColumnType("integer")
                        .HasColumnName("section_nr");

                    b.Property<string>("SectionType")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("section_type");

                    b.Property<Guid>("SstUuid")
                        .HasColumnType("uuid")
                        .HasColumnName("sst_uuid");

                    b.Property<decimal?>("Surf")
                        .HasColumnType("numeric")
                        .HasColumnName("surf");

                    b.HasKey("Id")
                        .HasName("pk_towersite_plates");

                    b.ToTable("towersite_plates");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.TowersitePlatesSummary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityAlwaysColumn();

                    b.Property<decimal?>("DGrandTotal")
                        .HasColumnType("numeric")
                        .HasColumnName("d_grand_total");

                    b.Property<decimal?>("DTotal")
                        .HasColumnType("numeric")
                        .HasColumnName("d_total");

                    b.Property<decimal?>("GwghtGrandTotal")
                        .HasColumnType("numeric")
                        .HasColumnName("gwght_grand_total");

                    b.Property<decimal?>("GwghtTotal")
                        .HasColumnType("numeric")
                        .HasColumnName("gwght_total");

                    b.Property<DateTimeOffset?>("LastModifiedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_date_time");

                    b.Property<decimal?>("NwghtGrandTotal")
                        .HasColumnType("numeric")
                        .HasColumnName("nwght_grand_total");

                    b.Property<decimal?>("NwghtTotal")
                        .HasColumnType("numeric")
                        .HasColumnName("nwght_total");

                    b.Property<DateTimeOffset?>("RecordInsertDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("record_insert_date_time");

                    b.Property<int>("SectionNr")
                        .HasColumnType("integer")
                        .HasColumnName("section_nr");

                    b.Property<string>("SectionType")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("section_type");

                    b.Property<Guid>("SstUuid")
                        .HasColumnType("uuid")
                        .HasColumnName("sst_uuid");

                    b.Property<decimal?>("SurfGrandTotal")
                        .HasColumnType("numeric")
                        .HasColumnName("surf_grand_total");

                    b.Property<decimal?>("SurfTotal")
                        .HasColumnType("numeric")
                        .HasColumnName("surf_total");

                    b.HasKey("Id")
                        .HasName("pk_towersite_plates_summary");

                    b.ToTable("towersite_plates_summary");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.TransportMode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityAlwaysColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_transport_modes");

                    b.ToTable("transport_modes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Road"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Rail"
                        });
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.WtgCatalogue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityAlwaysColumn();

                    b.Property<decimal>("WtgSizeMW")
                        .HasPrecision(10, 5)
                        .HasColumnType("numeric(10,5)")
                        .HasColumnName("wtg_size_mw");

                    b.Property<string>("WtgType")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("wtg_type");

                    b.HasKey("Id")
                        .HasName("pk_wtg_catalogues");

                    b.ToTable("wtg_catalogues");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            WtgSizeMW = 6.2m,
                            WtgType = "SG 6.0-170"
                        },
                        new
                        {
                            Id = 2,
                            WtgSizeMW = 6.6m,
                            WtgType = "SG 6.0-155"
                        },
                        new
                        {
                            Id = 3,
                            WtgSizeMW = 5m,
                            WtgType = "SG 5.0-145"
                        },
                        new
                        {
                            Id = 4,
                            WtgSizeMW = 5m,
                            WtgType = "SG 5.0-132"
                        },
                        new
                        {
                            Id = 5,
                            WtgSizeMW = 3.6m,
                            WtgType = "SG 3.4-145 CS"
                        },
                        new
                        {
                            Id = 6,
                            WtgSizeMW = 3.65m,
                            WtgType = "SG 3.4-132 CIIA"
                        },
                        new
                        {
                            Id = 7,
                            WtgSizeMW = 3.75m,
                            WtgType = "SG 3.4-132 CIA"
                        });
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.WtgConfiguration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityAlwaysColumn();

                    b.Property<DateTimeOffset?>("LastModifiedDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_date_time");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasColumnName("quantity");

                    b.Property<bool>("QuantityTrigger")
                        .HasColumnType("boolean")
                        .HasColumnName("quantity_trigger");

                    b.Property<int>("QuoteId")
                        .HasColumnType("integer")
                        .HasColumnName("quote_id");

                    b.Property<DateTimeOffset?>("RecordInsertDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("record_insert_date_time");

                    b.Property<decimal>("WindfarmSize")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("windfarm_size");

                    b.Property<bool>("WindfarmSizeTrigger")
                        .HasColumnType("boolean")
                        .HasColumnName("windfarm_size_trigger");

                    b.Property<int>("WtgCatalogueId")
                        .HasColumnType("integer")
                        .HasColumnName("wtg_catalogue_id");

                    b.HasKey("Id")
                        .HasName("pk_wtg_configurations");

                    b.HasIndex("QuoteId")
                        .HasDatabaseName("ix_wtg_configurations_quote_id");

                    b.HasIndex("WtgCatalogueId")
                        .HasDatabaseName("ix_wtg_configurations_wtg_catalogue_id");

                    b.ToTable("wtg_configurations");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.WtgThreshold", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id")
                        .UseIdentityAlwaysColumn();

                    b.Property<int>("TurbineQuantity")
                        .HasColumnType("integer")
                        .HasColumnName("turbine_quantity");

                    b.Property<decimal>("WindFarmSize")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasColumnName("wind_farm_size");

                    b.HasKey("Id")
                        .HasName("pk_wtg_thresholds");

                    b.ToTable("wtg_thresholds");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TurbineQuantity = 20,
                            WindFarmSize = 100m
                        });
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.ConstructionConstraint", b =>
                {
                    b.HasOne("SGRE.TSA.DataStore.API.Models.ProjectConstraint", "ProjectConstraint")
                        .WithOne("ConstructionConstraint")
                        .HasForeignKey("SGRE.TSA.DataStore.API.Models.ConstructionConstraint", "ProjectConstraintId")
                        .HasConstraintName("fk_construction_constraints_project_constraints_project_constr")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectConstraint");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.Country", b =>
                {
                    b.HasOne("SGRE.TSA.DataStore.API.Models.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .HasConstraintName("fk_countries_regions_region_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.GenericMarketBoundary", b =>
                {
                    b.HasOne("SGRE.TSA.DataStore.API.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .HasConstraintName("fk_generic_market_boundaries_countries_country_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SGRE.TSA.DataStore.API.Models.TransportMode", "TransportMode")
                        .WithMany()
                        .HasForeignKey("TransportModeId")
                        .HasConstraintName("fk_generic_market_boundaries_transport_modes_transport_mode_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("TransportMode");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.LogisticConstraint", b =>
                {
                    b.HasOne("SGRE.TSA.DataStore.API.Models.LogisticStatus", "LogisticStatus")
                        .WithMany()
                        .HasForeignKey("LogisticStatusId")
                        .HasConstraintName("fk_logistic_constraints_logistic_statuses_logistic_status_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SGRE.TSA.DataStore.API.Models.ProjectConstraint", "ProjectConstraint")
                        .WithOne("LogisticConstraint")
                        .HasForeignKey("SGRE.TSA.DataStore.API.Models.LogisticConstraint", "ProjectConstraintId")
                        .HasConstraintName("fk_logistic_constraints_project_constraints_project_constraint")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LogisticStatus");

                    b.Navigation("ProjectConstraint");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.LogisticProjectBoundary", b =>
                {
                    b.HasOne("SGRE.TSA.DataStore.API.Models.LogisticConstraint", "LogisticConstraint")
                        .WithMany("logisticProjectBoundaries")
                        .HasForeignKey("LogisticConstraintId")
                        .HasConstraintName("fk_logistic_project_boundaries_logistic_constraints_logistic_co")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SGRE.TSA.DataStore.API.Models.TransportMode", "TransportMode")
                        .WithMany()
                        .HasForeignKey("TransportModeId")
                        .HasConstraintName("fk_logistic_project_boundaries_transport_modes_transport_mode_")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LogisticConstraint");

                    b.Navigation("TransportMode");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.Permission", b =>
                {
                    b.HasOne("SGRE.TSA.DataStore.API.Models.ProjectModule", "ProjectModule")
                        .WithMany()
                        .HasForeignKey("ProjectModuleId")
                        .HasConstraintName("fk_permissions_project_modules_project_module_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SGRE.TSA.DataStore.API.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_permissions_roles_role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectModule");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.PermitsSalesConstraint", b =>
                {
                    b.HasOne("SGRE.TSA.DataStore.API.Models.ProjectConstraint", "ProjectConstraints")
                        .WithOne("PermitsSalesConstraint")
                        .HasForeignKey("SGRE.TSA.DataStore.API.Models.PermitsSalesConstraint", "ProjectConstraintId")
                        .HasConstraintName("fk_permits_sales_constraints_project_constraints_project_const")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectConstraints");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.Project", b =>
                {
                    b.HasOne("SGRE.TSA.DataStore.API.Models.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .HasConstraintName("fk_projects_countries_country_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.ProjectConstraint", b =>
                {
                    b.HasOne("SGRE.TSA.DataStore.API.Models.Project", "Project")
                        .WithMany("ProjectConstraints")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("fk_project_constraints_projects_project_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.ProjectMileStones", b =>
                {
                    b.HasOne("SGRE.TSA.DataStore.API.Models.MileStone", "MileStone")
                        .WithMany()
                        .HasForeignKey("MileStoneId")
                        .HasConstraintName("fk_project_mile_stones_mile_stones_mile_stone_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SGRE.TSA.DataStore.API.Models.Project", "Project")
                        .WithMany("ProjectMileStones")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("fk_project_mile_stones_projects_project_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MileStone");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.ProjectRoles", b =>
                {
                    b.HasOne("SGRE.TSA.DataStore.API.Models.Project", "Project")
                        .WithMany("ProjectRoles")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("fk_project_roles_projects_project_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SGRE.TSA.DataStore.API.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_project_roles_roles_role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.Proposal", b =>
                {
                    b.HasOne("SGRE.TSA.DataStore.API.Models.Certification", "Certification")
                        .WithMany()
                        .HasForeignKey("CertificationId")
                        .HasConstraintName("fk_proposals_certifications_certification_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SGRE.TSA.DataStore.API.Models.Project", "Project")
                        .WithMany("Proposals")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("fk_proposals_projects_project_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Certification");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.ProposalTasks", b =>
                {
                    b.HasOne("SGRE.TSA.DataStore.API.Models.Proposal", "Proposal")
                        .WithMany("ProposalTasks")
                        .HasForeignKey("ProposalId")
                        .HasConstraintName("fk_proposal_tasks_proposals_proposal_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SGRE.TSA.DataStore.API.Models.Task", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .HasConstraintName("fk_proposal_tasks_tasks_task_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Proposal");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.Quote", b =>
                {
                    b.HasOne("SGRE.TSA.DataStore.API.Models.Proposal", "Proposal")
                        .WithMany("Quotes")
                        .HasForeignKey("ProposalId")
                        .HasConstraintName("fk_quotes_proposals_proposal_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Proposal");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.Scenario", b =>
                {
                    b.HasOne("SGRE.TSA.DataStore.API.Models.WtgConfiguration", "WtgConfiguration")
                        .WithMany("Scenarios")
                        .HasForeignKey("WtgConfigurationId")
                        .HasConstraintName("fk_scenarios_wtg_configurations_wtg_configuration_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WtgConfiguration");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.ScenarioCostsKpi", b =>
                {
                    b.HasOne("SGRE.TSA.DataStore.API.Models.Scenario", "Scenario")
                        .WithMany("ScenarioCostsKpis")
                        .HasForeignKey("ScenarioId")
                        .HasConstraintName("fk_scenario_costs_kpis_scenarios_scenario_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Scenario");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.ScenarioDesign", b =>
                {
                    b.HasOne("SGRE.TSA.DataStore.API.Models.Scenario", "Scenario")
                        .WithMany("ScenarioDesigns")
                        .HasForeignKey("ScenarioId")
                        .HasConstraintName("fk_scenario_designs_scenarios_scenario_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Scenario");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.SpecialRequirementsSalesConstraint", b =>
                {
                    b.HasOne("SGRE.TSA.DataStore.API.Models.ProjectConstraint", "ProjectConstraint")
                        .WithOne("SpecialRequirementsSalesConstraint")
                        .HasForeignKey("SGRE.TSA.DataStore.API.Models.SpecialRequirementsSalesConstraint", "ProjectConstraintId")
                        .HasConstraintName("fk_special_requirements_sales_constraints_project_constraints_")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectConstraint");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.WtgConfiguration", b =>
                {
                    b.HasOne("SGRE.TSA.DataStore.API.Models.Quote", "Quote")
                        .WithMany("WtgConfigurations")
                        .HasForeignKey("QuoteId")
                        .HasConstraintName("fk_wtg_configurations_quotes_quote_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SGRE.TSA.DataStore.API.Models.WtgCatalogue", "WtgCatalogue")
                        .WithMany()
                        .HasForeignKey("WtgCatalogueId")
                        .HasConstraintName("fk_wtg_configurations_wtg_catalogues_wtg_catalogue_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quote");

                    b.Navigation("WtgCatalogue");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.LogisticConstraint", b =>
                {
                    b.Navigation("logisticProjectBoundaries");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.Project", b =>
                {
                    b.Navigation("ProjectConstraints");

                    b.Navigation("ProjectMileStones");

                    b.Navigation("ProjectRoles");

                    b.Navigation("Proposals");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.ProjectConstraint", b =>
                {
                    b.Navigation("ConstructionConstraint");

                    b.Navigation("LogisticConstraint");

                    b.Navigation("PermitsSalesConstraint");

                    b.Navigation("SpecialRequirementsSalesConstraint");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.Proposal", b =>
                {
                    b.Navigation("ProposalTasks");

                    b.Navigation("Quotes");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.Quote", b =>
                {
                    b.Navigation("WtgConfigurations");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.Scenario", b =>
                {
                    b.Navigation("ScenarioCostsKpis");

                    b.Navigation("ScenarioDesigns");
                });

            modelBuilder.Entity("SGRE.TSA.DataStore.API.Models.WtgConfiguration", b =>
                {
                    b.Navigation("Scenarios");
                });
#pragma warning restore 612, 618
        }
    }
}
