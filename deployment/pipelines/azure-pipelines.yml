# Docker
# Build a Docker image 
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- dfp-data
- release
- master

variables:
  tag: '$(Build.BuildId)'
  buildConfiguration: 'Release'
stages:
- stage: Build
  displayName: Build image
  jobs:  
  - job: DockerBuildDev
    displayName: "Dev Docker Build Job"
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Docker@1
      displayName: Build a Dev image
      continueOnError: true
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
      inputs:
        containerregistrytype: 'Azure Container Registry'
        azureSubscriptionEndpoint: 'DevOps_RGDEVDVLGENDFPWE01_contributor'
        azureContainerRegistry: 'acrdevdvlstr01.azurecr.io'
        command: 'Build an image'
        dockerFile: 'src/app/SGRE.TSA/Dockerfile'
        imageName: 'acrdevdvlstr01.azurecr.io/tsa-data:$(Build.BuildId)'

    - task: Docker@1
      displayName: Push a Dev image
      continueOnError: true
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master')) 
      inputs:
        containerregistrytype: 'Azure Container Registry'
        azureSubscriptionEndpoint: 'DevOps_RGDEVDVLGENDFPWE01_contributor'
        azureContainerRegistry: 'acrdevdvlstr01.azurecr.io'
        command: 'Push an image'
        imageName: 'acrdevdvlstr01.azurecr.io/tsa-data:$(Build.BuildId)'

  - job: DockerBuildQlt
    displayName: "Qlt Docker Job"
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Docker@1
      displayName: Build a Qlt image
      continueOnError: true
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/dfp-data'))
      inputs:
        containerregistrytype: 'Azure Container Registry'
        azureSubscriptionEndpoint: 'DevOps_RGQLTDVLGENDFPWE01_contributor'
        azureContainerRegistry: 'acrqltdvlstr01.azurecr.io'
        command: 'Build an image'
        dockerFile: 'src/app/SGRE.TSA/Dockerfile'
        imageName: 'acrqltdvlstr01.azurecr.io/tsa-data:$(Build.BuildId)'

    - task: Docker@1
      displayName: Push a Qlt image
      continueOnError: true
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/dfp-data')) 
      inputs:
        containerregistrytype: 'Azure Container Registry'
        azureSubscriptionEndpoint: 'DevOps_RGQLTDVLGENDFPWE01_contributor'
        azureContainerRegistry: 'acrqltdvlstr01.azurecr.io'
        command: 'Push an image'
        imageName: 'acrqltdvlstr01.azurecr.io/tsa-data:$(Build.BuildId)'
  
  - job: DockerBuildProd
    displayName: "Prod Docker Job"
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Docker@1
      displayName: Build a Prd image
      continueOnError: true
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/release'))
      inputs:
        containerregistrytype: 'Azure Container Registry'
        azureSubscriptionEndpoint: 'DevOps_RGPRDDVLGENDFPWE01_contributor'
        azureContainerRegistry: 'acrprddvlstr01.azurecr.io'
        command: 'Build an image'
        dockerFile: 'src/app/SGRE.TSA/Dockerfile'
        imageName: 'acrprddvlstr01.azurecr.io/tsa-data:$(Build.BuildId)'

    - task: Docker@1
      displayName: Push a Prd image
      continueOnError: true
      condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/release')) 
      inputs:
        containerregistrytype: 'Azure Container Registry'
        azureSubscriptionEndpoint: 'DevOps_RGPRDDVLGENDFPWE01_contributor'
        azureContainerRegistry: 'acrprddvlstr01.azurecr.io'
        command: 'Push an image'
        imageName: 'acrprddvlstr01.azurecr.io/tsa-data:$(Build.BuildId)'
        
  - job: DockerArtifact
    displayName: "Artifact Job"
    pool:
      vmImage: 'ubuntu-latest'
    steps:      
    - task: CopyFiles@2
      continueOnError: true
      inputs:
        SourceFolder: 'deployment/pipelines'
        Contents: '**'
        TargetFolder: '$(build.artifactstagingdirectory)/'
        
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Artifact'
      inputs:
       PathtoPublish: '$(build.artifactstagingdirectory)'
       ArtifactName: 'drop'
       publishLocation: 'Container'
      condition: succeededOrFailed()